"use strict";(self.webpackChunksuchjs_com=self.webpackChunksuchjs_com||[]).push([[129],{5438:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-5ab68522",path:"/en/mock.html",title:"Mock API",lang:"en-US",frontmatter:{lang:"en-US",title:"Mock API",description:"how to mock in suchjs"},excerpt:"",headers:[{level:2,title:"In browser",slug:"in-browser",children:[]},{level:2,title:"Nodejs Environment",slug:"nodejs-environment",children:[]}],filePathRelative:"en/mock.md",git:{contributors:[]}}},9065:(n,s,a)=>{a.r(s),a.d(s,{default:()=>w});var t=a(6252);const e=(0,t.Wm)("h2",{id:"in-browser",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#in-browser","aria-hidden":"true"},"#"),(0,t.Uk)(" In browser")],-1),p=(0,t.Uk)("The Suchjs library itself does not support intercepting requests and mock data, but provides a separate library "),o={href:"https://github.com/suchjs/such-mock-browser",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("such-mock-browser"),l=(0,t.Uk)(" to extend that ability."),u=(0,t.uE)('<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> \n<span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/gh/suchjs/such@master/dist/such.min.js<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> \n<span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/gh/suchjs/such-mock-browser@main/dist/such-mock-browser.min.js<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">const</span> globalSuch <span class="token operator">=</span> Such<span class="token punctuation">.</span>default<span class="token punctuation">;</span>\n  <span class="token comment">// Constants `target` and `method` are mounted on the Such class prototype method mock</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> target<span class="token punctuation">,</span> method <span class="token punctuation">}</span> <span class="token operator">=</span> globalSuch<span class="token punctuation">.</span>mock<span class="token punctuation">;</span>\n  <span class="token comment">/*\n   * The `Such` in the following annotations refer to the instance of the Such object.\n   * Such.mock(\n   *    pathname: string | RegExp,\n   *    matcher: RequestMethod | string | ((req, params) =&gt; boolean)),\n   *    data: (req, params) =&gt; data | unkown,\n   *    responseOptions?: {\n   *      timeout?: number,\n   *      transformer?: (resp: MockedResponse) =&gt; void | MockedResponse\n   *    }\n   * );\n   * Such.mock accept three or for arguments\n   * -----------------------------------------------\n   * [pathname]: \n   *  - Corresponding to the path name to be intercepted, it can be a string or a regular expression\n   * [matcher]:\n   *  - Corresponds to the logic that needs further matching for the request in addition to the previous path name matching\n   *  - The parameter can be a string or a combination of the values ​​of the method enumeration built in the library\n   *  - It can also be a return boolean function that can get the request and path matching parameters\n   * [data]:\n   *  - It can be an object that directly needs to be called by `Such.as`\n   *  - It can also be a function that provides request and path matching parameters, so that you can process the logic in the function and then return the data\n   * [responseOptions]:\n   *  - When the above [pathname] and [matcher] are matched, data will be generated according to the data parameter and returned in response\n   *  - The default response is json format data\n   *  - But sometimes the data returned in json format may not be what you want, so you can overwrite it here\n   *  - The parameter can be a response object, thereby overwriting the default response data\n   *  - The parameter can also be a function injected with the current default response data, and the response data can be modified in the function body\n   */</span>\n  globalSuch<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">&quot;/a&quot;</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    a<span class="token operator">:</span> <span class="token string">&quot;:uppercase:{3,5}&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  globalSuch<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/\\w*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    any<span class="token operator">:</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token comment">// it will override the `timeout` you setted in the `intercept` method</span>\n    <span class="token comment">// so you can set different `timeout` for each mock api.</span>\n    timeout<span class="token operator">:</span> <span class="token number">6000</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// At the end, the interception method needs to be executed, and the accepted parameter is a target type that needs to be intercepted</span>\n  <span class="token comment">// The target currently mounted on Such.mock contains two types</span>\n  <span class="token comment">//   - XHR &lt;intercepts XMLHttpRequest&gt;</span>\n  <span class="token comment">//   - FETCH &lt;intercepts window.fetch method&gt;</span>\n  globalSuch<span class="token punctuation">.</span>mock<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token constant">XHR</span> <span class="token operator">|</span> target<span class="token punctuation">.</span><span class="token constant">FETCH</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n    <span class="token comment">// you can set the `timeout` of the response</span>\n    <span class="token comment">// [1000, 3000] indicates that the response is random between 1 second and 3 seconds</span>\n    <span class="token comment">// it can also be a specific number, such as &#39;5000&#39;, means 5 seconds.</span>\n    timeout<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">]</span> \n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// use jquery for example</span>\n  $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/a&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token comment">// The above will output similar to: {a: &#39;LDFC&#39;}</span>\n  window\n    <span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;/anything&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      method<span class="token operator">:</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token comment">// The above will output: {any: &#39;*&#39;}</span>\n  <span class="token comment">// remove the intercept</span>\n  globalSuch<span class="token punctuation">.</span>mock<span class="token punctuation">.</span><span class="token function">unintercept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br></div></div><h2 id="nodejs-environment" tabindex="-1"><a class="header-anchor" href="#nodejs-environment" aria-hidden="true">#</a> Nodejs Environment</h2>',2),r=(0,t.Uk)("In the "),i=(0,t.Wm)("code",null,"nodejs",-1),k=(0,t.Uk)(" environment, you can install the "),m=(0,t.Wm)("code",null,"such-cli",-1),b=(0,t.Uk)(" package in the project to start a "),h=(0,t.Wm)("code",null,"mock server",-1),d=(0,t.Uk)(" service locally. For a detailed introduction, please refer to "),g={href:"https://github.com/suchjs/such-cli",target:"_blank",rel:"noopener noreferrer"},f=(0,t.Uk)("such-cli command line tool"),v=(0,t.Uk)("."),w={render:function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.j4)(t.HY,null,[e,(0,t.Wm)("p",null,[p,(0,t.Wm)("a",o,[c,(0,t.Wm)(a)]),l]),u,(0,t.Wm)("p",null,[r,i,k,m,b,h,d,(0,t.Wm)("a",g,[f,(0,t.Wm)(a)]),v])],64)}}}}]);