"use strict";(self.webpackChunksuchjs_com=self.webpackChunksuchjs_com||[]).push([[398],{7528:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-fdfab1a6",path:"/en/types/number.html",title:":number",lang:"en-US",frontmatter:{lang:"en-US",title:":number",description:"suchjs built-in type number"},excerpt:"",headers:[],filePathRelative:"en/types/number.md",git:{contributors:[]}}},7934:(n,a,s)=>{s.r(a),s.d(a,{default:()=>p});var e=s(6252);const t={id:"number-type-description",tabindex:"-1"},u=(0,e.Wm)("a",{class:"header-anchor",href:"#number-type-description","aria-hidden":"true"},"#",-1),i=(0,e.Uk)(),o=(0,e.Wm)("code",null,":number",-1),c=(0,e.Uk)(" type description "),l=(0,e.uE)('<p><code>:number</code> type is another one of the most basic built-in types. It supports the following data attributes:</p><ul><li><code>[min,max]</code> the size range is used to set the minimum and maximum values ​​of the number.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Set a number ranging from 1 to 100</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:number:[1,100]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Numbers theoretically contain the maximum and minimum values ​​by default</span>\n<span class="token comment">// Because of the random value floating point number, the probability of the maximum and minimum values ​​is very small</span>\n<span class="token comment">// If you really do not want to include the maximum or minimum value, you can add the configuration attribute `exclude`</span>\n<span class="token comment">// Configured as &#39;min&#39; to not include the minimum value, and configured as &#39;max&#39; to not include the maximum value</span>\n<span class="token comment">// Configured as &#39;min,max&#39; or &#39;both&#39; as ​​the minimum and maximum values ​​are both not included</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:number:[1,100]:#[exclude=&#39;max&#39;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li><code>%</code> formatting, when the number type is not formatted, the decimal part is like <code>Math.random()</code>, but usually this is not the data we want. Under normal circumstances, we will format it, suchjs uses a separate extraction library<code> nprintf</code> to format numbers similar to c language.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:number:[1,100]:%.2f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// The output is similar to: `32.58`</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',5),p={render:function(n,a){const s=(0,e.up)("Badge");return(0,e.wg)(),(0,e.j4)(e.HY,null,[(0,e.Wm)("h4",t,[u,i,o,c,(0,e.Wm)(s,{text:">= 1.0.0"})]),l],64)}}}}]);