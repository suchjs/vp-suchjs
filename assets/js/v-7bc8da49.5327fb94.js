"use strict";(self.webpackChunksuchjs_com=self.webpackChunksuchjs_com||[]).push([[394],{1145:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-7bc8da49",path:"/types/enum.html",title:"enum",lang:"zh-CN",frontmatter:{lang:"zh-CN",title:"enum",description:"suchjs枚举类型"},excerpt:"",headers:[],filePathRelative:"types/enum.md",git:{contributors:[]}}},6893:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var p=a(6252);const t={id:"枚举类型说明",tabindex:"-1"},e=(0,p.Wm)("a",{class:"header-anchor",href:"#枚举类型说明","aria-hidden":"true"},"#",-1),c=(0,p.Uk)(" 枚举类型说明 "),o=(0,p.uE)('<p>Suchjs 内并没有真实的 <code>:enum</code> 枚举类型，但我们很容易实现枚举类型，因为 <code>Suchjs</code> 遇到模拟的字段值为数组类型时，会随机挑选数组中的值做为生成数据的项（当字段个数为数组且大于 1 的时候）或值（当字段个数值为 1 的时候）。</p><ul><li>使用方式</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 限制字段的出现次数为1，值为枚举值的数组</span>\n<span class="token keyword">const</span> instance <span class="token operator">=</span> Such<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&quot;enum{1}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ninstance<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 将输出 {enum: true} 或者 {enum: false}</span>\n<span class="token comment">// 枚举值的好处在于，可以通过参数 options 的 keys 配置索引 index 值来决定想要生成的具体枚举值</span>\ninstance<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  keys<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;/enum&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      index<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 以上将输出 {enum: true}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',3),u={render:function(n,s){const a=(0,p.up)("Badge");return(0,p.wg)(),(0,p.j4)(p.HY,null,[(0,p.Wm)("h4",t,[e,c,(0,p.Wm)(a,{text:">= 1.1.0"})]),o],64)}}}}]);