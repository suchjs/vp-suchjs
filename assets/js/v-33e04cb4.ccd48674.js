"use strict";(self.webpackChunksuchjs_com=self.webpackChunksuchjs_com||[]).push([[181],{4546:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-33e04cb4",path:"/types/dict.html",title:":dict",lang:"zh-CN",frontmatter:{lang:"zh-CN",title:":dict",description:"suchjs内置类型dict"},excerpt:"",headers:[],filePathRelative:"types/dict.md",git:{contributors:[]}}},2451:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var t=a(6252);const p={id:"dict-类型说明",tabindex:"-1"},c=(0,t.Wm)("a",{class:"header-anchor",href:"#dict-类型说明","aria-hidden":"true"},"#",-1),e=(0,t.Uk)(" dict 类型说明 "),o=(0,t.uE)('<p><code>:dict</code> 用来模拟一些从数组中随机挑选一些值的类型，针对 Nodejs 环境和浏览器参数配置有所差别。</p><h5 id="针对-nodejs-环境" tabindex="-1"><a class="header-anchor" href="#针对-nodejs-环境" aria-hidden="true">#</a> 针对 Nodejs 环境</h5><ul><li><code>&amp;path</code> 在 Nodejs 环境下，接受一个路径的数据属性，该路径指向一个每行一条数据的字典文件。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * 假设在数据目录&lt;dataDir&gt;下，有一个 dict.txt 的字典文件\n * 字典文件的内容如下：\n * ---------------\n * hello\n * world\n * ---------------\n */</span>\n<span class="token keyword">const</span> instance <span class="token operator">=</span> Such<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token string">&quot;:dict:&amp;&lt;dataDir&gt;/dict.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ninstance<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `hello`</span>\ninstance<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `hello`</span>\ninstance<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `world`</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h5 id="针对浏览器环境" tabindex="-1"><a class="header-anchor" href="#针对浏览器环境" aria-hidden="true">#</a> 针对浏览器环境</h5><ul><li><code>#[data=]</code> 在浏览器环境下，接受一个 data 的数组参数配置，对应的数据字段需要通过调用 <code>Such.assign</code> 来注入。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 注入变量</span>\nSuch<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">&quot;dict&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 将 `data` 字段的值指向注入的变量</span>\n<span class="token keyword">const</span> instance <span class="token operator">=</span> Such<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token string">&quot;:dict:#[data=dict]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ninstance<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `hello`</span>\ninstance<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `hello`</span>\ninstance<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `world`</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',7),l={render:function(n,s){const a=(0,t.up)("Badge");return(0,t.wg)(),(0,t.j4)(t.HY,null,[(0,t.Wm)("h4",p,[c,e,(0,t.Wm)(a,{text:">= 1.0.0"})]),o],64)}}}}]);