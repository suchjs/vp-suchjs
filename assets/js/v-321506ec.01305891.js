"use strict";(self.webpackChunksuchjs_com=self.webpackChunksuchjs_com||[]).push([[413],{8335:(n,a,e)=>{e.r(a),e.d(a,{data:()=>s});const s={key:"v-321506ec",path:"/en/field.html",title:"Field configure",lang:"en-US",frontmatter:{lang:"en-US",title:"Field configure",description:"how to set the field"},excerpt:"",headers:[{level:2,title:"How to configure the fields",slug:"how-to-configure-the-fields",children:[]},{level:2,title:"Special value generation",slug:"special-value-generation",children:[]}],filePathRelative:"en/field.md",git:{contributors:[]}}},6364:(n,a,e)=>{e.r(a),e.d(a,{default:()=>g});var s=e(6252);const t={id:"how-to-configure-the-fields",tabindex:"-1"},o=(0,s.Wm)("a",{class:"header-anchor",href:"#how-to-configure-the-fields","aria-hidden":"true"},"#",-1),i=(0,s.Uk)(" How to configure the fields "),l=(0,s.Wm)("p",null,[(0,s.Uk)("Usually our actual data mocking is based on the "),(0,s.Wm)("code",null,"json"),(0,s.Uk)(" object, then we need configure the "),(0,s.Wm)("code",null,"key"),(0,s.Uk)(" of the data field. Suchjs supports the following configuration for the field key:")],-1),p=(0,s.Wm)("li",null,[(0,s.Wm)("p",null,[(0,s.Wm)("code",null,"?"),(0,s.Uk)(" indicates that a field is not required, that is, the field may not be included in the generated data.")])],-1),c=(0,s.uE)('<p><code>{min[,max]}</code> represents the number of occurrences of the field, it is usually used in array configuration, but pay attention to some details of the configuration:</p><ol><li><p>When <code>min</code> is <code>0</code>, the field value may get a <code>undefined</code>. If the <code>min</code> did hits <code>0</code>, and you still want to get a field value of an empty array, you can use <code>+0</code> instead of <code>0</code>. Similarly, when the value of <code>min</code> is <code>1</code>, <code>Suchjs</code> will also generate the primitive type of <code>value</code> instead of generating an array. If you still want to generate an array of <code>value</code> values, you need to use <code>+1</code> instead. The meaning of <code>+</code> plus sign here means that the generated data is always an array.</p></li><li><p>When the filed value itself is an array, the generated data will be an array what it&#39;s element was generated by the data type picked from the one of the item in field value randomly. If you want to generate an array which it&#39;s items are all the same type by one of the field value&#39;s items, you can add the identifier colon <code>:</code> before the <code>{</code>, such as <code>key:{3,5}</code>, which means to take one item of the field value array and generate an array of 3 to 5 items by the item.</p></li><li><p>If this array field is also optional, you can add a <code>?</code> symbol after the closing curly brace <code>}</code> at the end.</p></li><li><p>Note that the minimum number <code>0</code> and the optional symbol <code>?</code> have different meanings. When the minimum number is <code>0</code>, the field will always exist, even the value is <code>undefined</code>, while the field is setted by symobol <code>?</code>, the field may exist, and may not.</p></li><li><p>If the field value is not an array type, an array of the field value will be generated. This may be different from the behavior of the <code>mockjs</code> library, for example, in <code>mockjs</code>, the result will be a string with the value repeated multiple times, instead of an array of the value with a length same as the times.</p></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// The name field is optional</span>\n  <span class="token string">&quot;title?&quot;</span><span class="token operator">:</span> <span class="token string">&quot;:string:{3,10}&quot;</span><span class="token punctuation">,</span>\n  <span class="token comment">// The books field must be an array, the size of the array is 0 to 5</span>\n  <span class="token string">&quot;books{+0,5}&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    date<span class="token operator">:</span> <span class="token string">&quot;:date&quot;</span><span class="token punctuation">,</span>\n    author<span class="token operator">:</span> <span class="token string">&quot;:string:{10,20}&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// The tags field is optional. If it exists, it is an array of 3 strings</span>\n  <span class="token string">&quot;tags{3}?&quot;</span><span class="token operator">:</span> <span class="token string">&quot;:string:{5,10}&quot;</span><span class="token punctuation">,</span>\n  <span class="token comment">// The firm field is not required, if it exists, pick one from the array value</span>\n  <span class="token comment">// There is no `+` in front of the number 1, so the generated firm field data is a string</span>\n  <span class="token string">&quot;firm:{1}?&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Netflix&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Disney&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// The generated data is similar to the following json</span>\n<span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token string">&quot;H(@L@8&quot;</span><span class="token punctuation">,</span>\n  books<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      date<span class="token operator">:</span> <span class="token string">&quot;2013-07-19&quot;</span><span class="token punctuation">,</span>\n      author<span class="token operator">:</span> <span class="token string">&quot;1Lsy.k:;,RL`w~3RH%G2&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  tags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;)K2:\\\\&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x:fYEZ8U&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;+PcO7S^aK&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  firm<span class="token operator">:</span> <span class="token string">&quot;Disney&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>',3),r=(0,s.Uk)("Usually, our simulation data will be generated multiple times, but sometimes we need to precisely control whether the optional field exists, the specific length value of the array field, etc. Now, we can provide the specific "),u=(0,s.Wm)("code",null,"keys",-1),d=(0,s.Uk)(" parameter value when generating the simulation data , please refer to "),m=(0,s.Uk)("keys configuration"),h={id:"special-value-generation",tabindex:"-1"},f=(0,s.Wm)("a",{class:"header-anchor",href:"#special-value-generation","aria-hidden":"true"},"#",-1),k=(0,s.Uk)(" Special value generation "),b=(0,s.uE)('<p>Since the data mocking of Suchjs is described in string format, how to distinguish between normal strings and data types &amp; attributes becomes important. The data types in Suchjs all start with <code>:</code>, If you have a normal string also starting with a colon <code>:</code>, now you need to convert <code>:</code> with escaped <code>\\\\</code>. The escape character will be removed from the generated string at last. Examples are as follows:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\:number&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; &#39;:number&#39;</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:number&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; -31.50614310483728</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',2),g={render:function(n,a){const e=(0,s.up)("Badge"),g=(0,s.up)("RouterLink");return(0,s.wg)(),(0,s.j4)(s.HY,null,[(0,s.Wm)("h2",t,[o,i,(0,s.Wm)(e,{text:">= 1.0.0"})]),l,(0,s.Wm)("ul",null,[p,(0,s.Wm)("li",null,[c,(0,s.Wm)("p",null,[r,u,d,(0,s.Wm)(g,{to:"/en/api.html#such-instance"},{default:(0,s.w5)((()=>[m])),_:1})])])]),(0,s.Wm)("h2",h,[f,k,(0,s.Wm)(e,{text:">= 1.0.0"})]),b],64)}}}}]);