"use strict";(self.webpackChunksuchjs_com=self.webpackChunksuchjs_com||[]).push([[126],{6445:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-468115f0",path:"/types/template.html",title:"template",lang:"zh-CN",frontmatter:{lang:"zh-CN",title:"template",description:"suchjs内置模板字符串类型"},excerpt:"",headers:[],filePathRelative:"types/template.md",git:{contributors:[]}}},4940:(n,s,a)=>{a.r(s),a.d(s,{default:()=>h});var e=a(6252);const p={id:"模板字符串类型说明",tabindex:"-1"},t=(0,e.Wm)("a",{class:"header-anchor",href:"#模板字符串类型说明","aria-hidden":"true"},"#",-1),c=(0,e.Uk)(" 模板字符串类型说明 "),l=(0,e.Uk)("模板字符串类型是个比较特殊的类型，它主要基于 API "),o=(0,e.Wm)("code",null,"Such.template",-1),u=(0,e.Uk)(" 实现，在写法上，它基于三冒号 "),r=(0,e.Wm)("code",null,":::",-1),i=(0,e.Uk)(" 作为模板字符串的开始标识，而不是 "),m=(0,e.Wm)("code",null,":template",-1),d=(0,e.Uk)("，主要是为了方便书写和代码查看。其它更详细内容可以参考 API "),k=(0,e.Wm)("code",null,"Such.template",-1),b=(0,e.Uk)(" 的具体说明。"),g=(0,e.uE)('<ul><li>常规用法</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 以三冒号 ::: 开头，如果后面需要加更多数据属性</span>\n<span class="token comment">// 同样需要以三冒号 ::: 做为结束符，否则可以省略</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:::一个字符串-`:string`;一个数字`:number`;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 可以使用反斜杠对符号(`)和(:)进行转义</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:::\\\\`\\\\:::&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将输出 &quot;`:::&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><code>{min[,max]}</code> 模板字符串类型支持，长度属性，用来设置前面生成的模板字符串的重复次数。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 重复3到5次</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:::一个字符串-`:string`;一个数字`:number`;:::{3,5}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>注意：模板字符串类型是在 <code>v1.1.0</code> 版本中添加，此版本中是不支持 <code>:ref</code> 引用类型的，但在 <code>v1.1.1</code> 中进行了修复和补充，除了可以按以前的方式引用正常数据字段外，还增加了<del><code>/${0}</code>, <code>/${1}</code> 以及命名数据引用 <code>/${name}</code></del><sup>v3.0以前</sup> <code>//${0}</code>, <code>//${1}</code> 以及命名数据引用 <code>//${name}</code> 以双斜杠开头的这种特殊的路径来支持索引模板字符串本身用到的数据类型。命名数据类型是在类型前以一对尖括号 <code>&lt;&gt;</code> 包裹一个名称的方式来声明的，如果多个命名相同，引用的类型就会得到一个按出现顺序、最终值组成的数组。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  hello<span class="token operator">:</span> <span class="token string">&#39;你好&#39;</span><span class="token punctuation">,</span>\n  world<span class="token operator">:</span> <span class="token string">&#39;世界&#39;</span><span class="token punctuation">,</span>\n  say<span class="token operator">:</span> <span class="token string">&#39;:::`&lt;say&gt;:ref:&amp;./hello`，`&lt;say&gt;:ref:&amp;./world`！`:ref:&amp;//${0}`，`:ref:&amp;//${1}`！`:ref:&amp;//${say}:@join(&quot;，&quot;)`！&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 将输出</span>\n<span class="token punctuation">{</span>\n  hello<span class="token operator">:</span> <span class="token string">&#39;你好&#39;</span><span class="token punctuation">,</span>\n  world<span class="token operator">:</span> <span class="token string">&#39;世界&#39;</span><span class="token punctuation">,</span>\n  say<span class="token operator">:</span> <span class="token string">&#39;你好，世界！你好，世界！你好，世界！&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',6),h={render:function(n,s){const a=(0,e.up)("Badge"),h=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[(0,e.Wm)("h4",p,[t,c,(0,e.Wm)(a,{text:">= 1.1.0"})]),(0,e.Wm)("p",null,[l,o,u,r,i,m,d,(0,e.Wm)(h,{to:"/api.html#such-template"},{default:(0,e.w5)((()=>[k])),_:1}),b]),g],64)}}}}]);