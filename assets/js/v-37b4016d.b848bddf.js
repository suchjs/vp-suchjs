"use strict";(self.webpackChunksuchjs_com=self.webpackChunksuchjs_com||[]).push([[397],{2248:(e,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s={key:"v-37b4016d",path:"/en/types/regexp.html",title:":regexp",lang:"en-US",frontmatter:{lang:"en-US",title:":regexp",description:"suchjs built-in type regexp"},excerpt:"",headers:[],filePathRelative:"en/types/regexp.md",git:{contributors:[]}}},7700:(e,n,a)=>{a.r(n),a.d(n,{default:()=>c});var s=a(6252);const t={id:"regexp-type-description",tabindex:"-1"},r=(0,s.Wm)("a",{class:"header-anchor",href:"#regexp-type-description","aria-hidden":"true"},"#",-1),p=(0,s.Uk)(),o=(0,s.Wm)("code",null,"regexp",-1),i=(0,s.Uk)(" type description "),l=(0,s.uE)('<p><code>:regexp</code> type is a very powerful built-in type in the library. Many types can be extended based on this type, but it should not be overused. After all, parsing regular expressions and generating strings what matched the regexp is a relatively expensive task.</p><ul><li><code>//[imdsguy]</code> a regular expression <code>data attribute</code>, the mocked string should match the rule.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Output 3 to 5 English letters, not case sensitive</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:regexp:/[a-z]{3,5}/i&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// The output value is similar to: `aZFk`</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>#[]</code> the most powerful function of regular expression data type is that you can configure a named group value by the configuration <code>data attribute</code>, override the value what should the regulare expression generate in the name group.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Also take the above example as a reference, add grouping and configuration</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:regexp:/(?&lt;ch&gt;[a-z]){3,5}/i:#[ch=&#39;k&#39;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// In this way, the named group of &#39;ch&#39; is replaced by the configured value, with the letter `k`</span>\n<span class="token comment">// Note that the value of the grouping configuration here must match the regular rule&#39;s named group, otherwise an error will be thrown.</span>\n<span class="token comment">// The final generated value becomes a value like this: `kKkk`</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',5),c={render:function(e,n){const a=(0,s.up)("Badge");return(0,s.wg)(),(0,s.j4)(s.HY,null,[(0,s.Wm)("h4",t,[r,p,o,i,(0,s.Wm)(a,{text:">= 1.0.0"})]),l],64)}}}}]);