"use strict";(self.webpackChunksuchjs_com=self.webpackChunksuchjs_com||[]).push([[494],{6956:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-7bb559d8",path:"/en/extTypes.html",title:"Extend types",lang:"en-US",frontmatter:{lang:"en-US",title:"Extend types",description:"suchjs built-in extend type"},excerpt:"",headers:[{level:2,title:"Boolean types",slug:"boolean-types",children:[{level:3,title:":boolean",slug:"boolean",children:[]},{level:3,title:":bool",slug:"bool",children:[]}]},{level:2,title:"Number types",slug:"number-types",children:[{level:3,title:":integer",slug:"integer",children:[]},{level:3,title:":int",slug:"int",children:[]},{level:3,title:":percent",slug:"percent",children:[]}]},{level:2,title:"String types",slug:"string-types",children:[{level:3,title:":alphaNumericDash",slug:"alphanumericdash",children:[]},{level:3,title:":alphaNumeric",slug:"alphanumeric",children:[]},{level:3,title:":alpha",slug:"alpha",children:[]},{level:3,title:":numeric",slug:"numeric",children:[]},{level:3,title:":uppercase",slug:"uppercase",children:[]},{level:3,title:":lowercase",slug:"lowercase",children:[]}]},{level:2,title:"Network types",slug:"network-types",children:[{level:3,title:":protocol",slug:"protocol",children:[]},{level:3,title:":tld",slug:"tld",children:[]},{level:3,title:":domain",slug:"domain",children:[]},{level:3,title:":url",slug:"url",children:[]},{level:3,title:":email",slug:"email",children:[]},{level:3,title:":ipv4",slug:"ipv4",children:[]},{level:3,title:":ipv6",slug:"ipv6",children:[]},{level:3,title:":ip",slug:"ip",children:[]}]},{level:2,title:"Color types",slug:"color-types",children:[{level:3,title:":color$hex",slug:"color-hex",children:[]},{level:3,title:":color$rgb",slug:"color-rgb",children:[]},{level:3,title:":color$rgba",slug:"color-rgba",children:[]},{level:3,title:":color$hsl",slug:"color-hsl",children:[]},{level:3,title:":color$hsla",slug:"color-hsla",children:[]}]}],filePathRelative:"en/extTypes.md",git:{contributors:[]}}},9276:(n,s,a)=>{a.r(s),a.d(s,{default:()=>Ps});var e=a(6252);const t=(0,e.Wm)("h2",{id:"boolean-types",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#boolean-types","aria-hidden":"true"},"#"),(0,e.Uk)(" Boolean types")],-1),o={id:"boolean",tabindex:"-1"},c=(0,e.Wm)("a",{class:"header-anchor",href:"#boolean","aria-hidden":"true"},"#",-1),p=(0,e.Uk)(),i=(0,e.Wm)("code",null,":boolean",-1),l=(0,e.Uk)(),u=(0,e.uE)('<p>Returns a boolean value, true or false.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:boolean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true|false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',2),r={id:"bool",tabindex:"-1"},d=(0,e.Wm)("a",{class:"header-anchor",href:"#bool","aria-hidden":"true"},"#",-1),m=(0,e.Uk)(),h=(0,e.Wm)("code",null,":bool",-1),k=(0,e.Uk)(),g=(0,e.uE)('<p><code>:bool</code> type is a shorthand alias for <code>:boolean</code>. The alias is defined by the api <code>Such.alias</code> provided by Suchjs, such as <code>Such.alias(&quot;bool&quot;, &quot;boolean&quot;)</code>ã€‚</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:bool&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true|false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="number-types" tabindex="-1"><a class="header-anchor" href="#number-types" aria-hidden="true">#</a> Number types</h2>',3),b={id:"integer",tabindex:"-1"},v=(0,e.Wm)("a",{class:"header-anchor",href:"#integer","aria-hidden":"true"},"#",-1),f=(0,e.Uk)(),q=(0,e.Wm)("code",null,":integer",-1),x=(0,e.Uk)(),W=(0,e.uE)('<p>Returns an integer value.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:integer:[100,200]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 125</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>:integer</code> the type inherits from the <code>:number</code> type, which is defined by the api <code>Such.define</code> provided by Suchjs, and the way of definition is like: <code>Such.define(&quot;integer&quot;, &quot;number&quot;, &quot;%d&quot;)</code>, which is equivalent to a number type with the formatting <code>data attribute</code> fixed by <code>%d</code>.</p>',3),j={id:"int",tabindex:"-1"},y=(0,e.Wm)("a",{class:"header-anchor",href:"#int","aria-hidden":"true"},"#",-1),w=(0,e.Uk)(),U=(0,e.Wm)("code",null,":int",-1),S=(0,e.Uk)(),E=(0,e.uE)('<p><code>:int</code> type is a shorthand alias for <code>:integer</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:int:[100,200]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 125</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',2),T={id:"percent",tabindex:"-1"},R=(0,e.Wm)("a",{class:"header-anchor",href:"#percent","aria-hidden":"true"},"#",-1),$=(0,e.Uk)(),_=(0,e.Wm)("code",null,":percent",-1),A=(0,e.Uk)(),N=(0,e.uE)('<p>Returns a percentage value without a decimal point, which is defined as <code>Such.define(&#39;percent&#39;,&#39;number&#39;,&#39;[1,100]:%d%&#39;)</code>, which means that the number ranges from 1 to 100, and at the same time It is formatted as an integer followed by the <code>%</code> symbol.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:percent&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;72%&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="string-types" tabindex="-1"><a class="header-anchor" href="#string-types" aria-hidden="true">#</a> String types</h2>',3),D={id:"alphanumericdash",tabindex:"-1"},B=(0,e.Wm)("a",{class:"header-anchor",href:"#alphanumericdash","aria-hidden":"true"},"#",-1),I=(0,e.Uk)(),C=(0,e.Wm)("code",null,":alphaNumericDash",-1),L=(0,e.Uk)(),z=(0,e.Wm)("p",null,[(0,e.Uk)("Return a string consisting of numbers, english letters and underscores, and its definition method is "),(0,e.Wm)("code",null,"Such.define('alphaNumericDash','string','[48-57,97-122,65-90,95]') "),(0,e.Uk)(", which is equivalent to limiting the code point range of unicode based on the string type. Numbers, lowercase letters, uppercase letters, and underscores _, which is equivalent to the "),(0,e.Wm)("code",null,"\\w"),(0,e.Uk)(" character set of regular expressions.")],-1),F={id:"alphanumeric",tabindex:"-1"},P=(0,e.Wm)("a",{class:"header-anchor",href:"#alphanumeric","aria-hidden":"true"},"#",-1),G=(0,e.Uk)(),H=(0,e.Wm)("code",null,":alphaNumeric",-1),Y=(0,e.Uk)(),J=(0,e.uE)('<p>Returns a string consisting of English letters and Arabic numerals.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:alphaNumeric&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;2aD3z&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',2),K={id:"alpha",tabindex:"-1"},M=(0,e.Wm)("a",{class:"header-anchor",href:"#alpha","aria-hidden":"true"},"#",-1),O=(0,e.Uk)(),Q=(0,e.Wm)("code",null,":alpha",-1),V=(0,e.Uk)(),X=(0,e.uE)('<p>Returns a string consisting of English letters.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:alpha&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;ApkDi&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',2),Z={id:"numeric",tabindex:"-1"},nn=(0,e.Wm)("a",{class:"header-anchor",href:"#numeric","aria-hidden":"true"},"#",-1),sn=(0,e.Uk)(),an=(0,e.Wm)("code",null,":numeric",-1),en=(0,e.Uk)(),tn=(0,e.uE)('<p>Returns a string of Arabic numerals.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:numeric&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;39011&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',2),on={id:"uppercase",tabindex:"-1"},cn=(0,e.Wm)("a",{class:"header-anchor",href:"#uppercase","aria-hidden":"true"},"#",-1),pn=(0,e.Uk)(),ln=(0,e.Wm)("code",null,":uppercase",-1),un=(0,e.Uk)(),rn=(0,e.uE)('<p>Returns a string of uppercase letters, which is defined as <code>Such.define(&#39;uppercase&#39;,&#39;string&#39;,&#39;[65,90]&#39;)</code>, which is equivalent to a string type with the unicode code point from 65 to 90, that is, capital letters.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:uppercase&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;IGSDLD&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',2),dn={id:"lowercase",tabindex:"-1"},mn=(0,e.Wm)("a",{class:"header-anchor",href:"#lowercase","aria-hidden":"true"},"#",-1),hn=(0,e.Uk)(),kn=(0,e.Wm)("code",null,":lowercase",-1),gn=(0,e.Uk)(),bn=(0,e.uE)('<p>Returns a lowercase letter string, which is defined as <code>Such.define(&#39;lowercase&#39;,&#39;string&#39;,&#39;[97,122]&#39;)</code>, which is equivalent to to a string type with the unicode code point from 97 to 122, that is, lowercase letters.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:lowercase&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;augdkoa&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:lowercase&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;A9dkI_1&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="network-types" tabindex="-1"><a class="header-anchor" href="#network-types" aria-hidden="true">#</a> Network types</h2>',4),vn={id:"protocol",tabindex:"-1"},fn=(0,e.Wm)("a",{class:"header-anchor",href:"#protocol","aria-hidden":"true"},"#",-1),qn=(0,e.Uk)(),xn=(0,e.Wm)("code",null,":protocol",-1),Wn=(0,e.Uk)(),jn=(0,e.uE)('<p>Returns a protocol header, such as <code>https</code> <code>ftp</code>, etc.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:protocol&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The output is similar to: &quot;telnet&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',2),yn={id:"tld",tabindex:"-1"},wn=(0,e.Wm)("a",{class:"header-anchor",href:"#tld","aria-hidden":"true"},"#",-1),Un=(0,e.Uk)(),Sn=(0,e.Wm)("code",null,":tld",-1),En=(0,e.Uk)(),Tn=(0,e.uE)('<p>Returns a top-level domain address, such as <code>.com</code> <code>.net</code>, etc.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:tld&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The output is similar to: &quot;.org&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',2),Rn={id:"domain",tabindex:"-1"},$n=(0,e.Wm)("a",{class:"header-anchor",href:"#domain","aria-hidden":"true"},"#",-1),_n=(0,e.Uk)(),An=(0,e.Wm)("code",null,":domain",-1),Nn=(0,e.Uk)(),Dn=(0,e.uE)('<p>Returns a domain name address, supports configuring <code>tld</code> or <code>domainLabel</code> to generate a specific top-level domain or domain name label.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:doamin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The output is similar to: &quot;a2j.org&quot;</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:doamin#[tld=&#39;.com&#39;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The output is similar to: &quot;3cf.com&quot; &quot;ku2l.com&quot;</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:domain#[domainLabel=&#39;google&#39;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The output is similar to: &quot;google.com&quot; &quot;google.net&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',2),Bn={id:"url",tabindex:"-1"},In=(0,e.Wm)("a",{class:"header-anchor",href:"#url","aria-hidden":"true"},"#",-1),Cn=(0,e.Uk)(),Ln=(0,e.Wm)("code",null,":url",-1),zn=(0,e.Uk)(),Fn=(0,e.uE)('<p>Return a url address, it inherits from <code>:regexp</code>, and the matching regular expression is fixed on the basis of it.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// The output is similar toï¼š&#39;https://x93m.cn/AD.htm?mn_u=kji&amp;7__b_=%EA%BA#_===_v__&#39;</span>\n<span class="token comment">// If you want to control the precise url value, you can add precise configuration parameters for grouping</span>\n<span class="token comment">// For more named groups, you can check the definition of url type in extends/recommend.ts</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;:url:#[protocol=&quot;https&quot;,tld=&quot;com&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',2),Pn={id:"email",tabindex:"-1"},Gn=(0,e.Wm)("a",{class:"header-anchor",href:"#email","aria-hidden":"true"},"#",-1),Hn=(0,e.Uk)(),Yn=(0,e.Wm)("code",null,":email",-1),Jn=(0,e.Uk)(),Kn=(0,e.uE)('<p>Returns an email address, which also inherits from <code>:regexp</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The output is similar to: &#39;3yh_meqy@o6tw1.com&#39;</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;:email:#[domain=&quot;gmail.com&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The output is similar to: `7z4@gmail.com`</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',2),Mn={id:"ipv4",tabindex:"-1"},On=(0,e.Wm)("a",{class:"header-anchor",href:"#ipv4","aria-hidden":"true"},"#",-1),Qn=(0,e.Uk)(),Vn=(0,e.Wm)("code",null,":ipv4",-1),Xn=(0,e.Uk)(),Zn=(0,e.uE)('<p>Returns a v4 ip address, such as <code>255.255.230.2</code> <code>120.53.2.8</code>, etc. It supports three configurations, <code>min</code> specifies the minimum value of ip, <code>max</code> specifies the maximum value of ip, and <code>type</code> specifies <code>ABCDE</code> which type of address, it can be used in combination with <code>min</code> or <code>max</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:ipv4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The output is similar to: &quot;124.25.30.111&quot;</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:ipv4#[min=&#39;10.120.2.5&#39;,max=&#39;10.120.2.7&#39;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The output is similar to &quot;10.120.2.5&quot; &quot;10.120.2.6&quot; &quot;10.120.2.7&quot;</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:ipv4#[type=&#39;A&#39;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The output is similar to: &quot;127.2.2.1&quot; etc.</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:ipv4#[type=&#39;A&#39;,max=&#39;127.0.0.0&#39;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The output is similar to: &quot;11.252.10.11&quot; etc.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',2),ns={id:"ipv6",tabindex:"-1"},ss=(0,e.Wm)("a",{class:"header-anchor",href:"#ipv6","aria-hidden":"true"},"#",-1),as=(0,e.Uk)(),es=(0,e.Wm)("code",null,":ipv6",-1),ts=(0,e.Uk)(),os=(0,e.uE)('<p>Returns a v6 version of the ip address, which supports a parameter, <code>compress</code> is a value between 0 and 1, specifying the degree of compression possible, 0 means no compression at all, 1 means fully compressed.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:ipv6&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The output is similar to: &quot;abcd:ef01:2345:6789:abcd:ef01:2345:6789&quot;</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:ipv6#[compress=0.5]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The output is similar to: &quot;abcd::ef01:0:0:3cf&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',2),cs={id:"ip",tabindex:"-1"},ps=(0,e.Wm)("a",{class:"header-anchor",href:"#ip","aria-hidden":"true"},"#",-1),is=(0,e.Uk)(),ls=(0,e.Wm)("code",null,":ip",-1),us=(0,e.Uk)(),rs=(0,e.uE)('<p>Returns an ip address, which can specify a <code>v6</code> parameter, which is represented as an ipv6 address, otherwise it is ipv4, and the corresponding other parameters can be seen in the ipv4 and ipv6 configurations above.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:ip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The output is similar to: &quot;192.10.25.37&quot;</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:ip#[v6]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The output is similar to: &quot;abcd:ef01:2345:6789:abcd:ef01:2345:6789&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="color-types" tabindex="-1"><a class="header-anchor" href="#color-types" aria-hidden="true">#</a> Color types</h2>',3),ds={id:"color-hex",tabindex:"-1"},ms=(0,e.Wm)("a",{class:"header-anchor",href:"#color-hex","aria-hidden":"true"},"#",-1),hs=(0,e.Uk)(),ks=(0,e.Wm)("code",null,":color$hex",-1),gs=(0,e.Uk)(),bs=(0,e.uE)('<p>Returns a hexadecimal color value, supports two parameter configuration, <code>lowercase</code>, how to generate the color value, when <code>true</code>, the value is lowercase, otherwise it is uppercase. <code>argb</code>, when it is <code>true</code>, returns 8-bit color value in <code>argb</code> format, otherwise, it returns 6-bit color value in <code>rgb</code> format.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:color$hex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The output is similar to: &#39;#B22AB0&#39;</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;:color$hex:#[lowcase=true,argb=true]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The output is similar to: `#92131a73`</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',2),vs={id:"color-rgb",tabindex:"-1"},fs=(0,e.Wm)("a",{class:"header-anchor",href:"#color-rgb","aria-hidden":"true"},"#",-1),qs=(0,e.Uk)(),xs=(0,e.Wm)("code",null,":color$rgb",-1),Ws=(0,e.Uk)(),js=(0,e.uE)('<p>Returns an rgb color value.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:color$rgb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The output is similar to: &#39;rgb(255,0,122)&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',2),ys={id:"color-rgba",tabindex:"-1"},ws=(0,e.Wm)("a",{class:"header-anchor",href:"#color-rgba","aria-hidden":"true"},"#",-1),Us=(0,e.Uk)(),Ss=(0,e.Wm)("code",null,":color$rgba",-1),Es=(0,e.Uk)(),Ts=(0,e.uE)('<p>Returns an rgba color value.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:color$rgba&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The output is similar to: &#39;rgba(255,0,122,0.25)&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',2),Rs={id:"color-hsl",tabindex:"-1"},$s=(0,e.Wm)("a",{class:"header-anchor",href:"#color-hsl","aria-hidden":"true"},"#",-1),_s=(0,e.Uk)(),As=(0,e.Wm)("code",null,":color$hsl",-1),Ns=(0,e.Uk)(),Ds=(0,e.uE)('<p>Returns an hsl color value.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:color$hsl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The output is similar to: &#39;hsl(240,30%,60%)&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',2),Bs={id:"color-hsla",tabindex:"-1"},Is=(0,e.Wm)("a",{class:"header-anchor",href:"#color-hsla","aria-hidden":"true"},"#",-1),Cs=(0,e.Uk)(),Ls=(0,e.Wm)("code",null,":color$hsla",-1),zs=(0,e.Uk)(),Fs=(0,e.uE)('<p>Returns an hsla color value.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:color$hsla&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The output is similar to: &#39;hsl(240,30%,60%,0.55)&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Because Suchjs itself has good extensibility, the embedding of built-in types is mainly based on some commonly used types, and more types may continue to be added in the future. For more specific types, please use the API to configure files, with the help of <code>Such.config</code> to achieve.</p>',3),Ps={render:function(n,s){const a=(0,e.up)("Badge");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,(0,e.Wm)("h3",o,[c,p,i,l,(0,e.Wm)(a,{text:">= 1.0.0"})]),u,(0,e.Wm)("h3",r,[d,m,h,k,(0,e.Wm)(a,{text:">= 1.0.0"})]),g,(0,e.Wm)("h3",b,[v,f,q,x,(0,e.Wm)(a,{text:">= 1.0.0"})]),W,(0,e.Wm)("h3",j,[y,w,U,S,(0,e.Wm)(a,{text:">= 1.0.0"})]),E,(0,e.Wm)("h3",T,[R,$,_,A,(0,e.Wm)(a,{text:">= 1.0.0"})]),N,(0,e.Wm)("h3",D,[B,I,C,L,(0,e.Wm)(a,{text:">= 1.0.0"})]),z,(0,e.Wm)("h3",F,[P,G,H,Y,(0,e.Wm)(a,{text:">= 2.1.1"})]),J,(0,e.Wm)("h3",K,[M,O,Q,V,(0,e.Wm)(a,{text:">= 2.1.1"})]),X,(0,e.Wm)("h3",Z,[nn,sn,an,en,(0,e.Wm)(a,{text:">= 2.1.1"})]),tn,(0,e.Wm)("h3",on,[cn,pn,ln,un,(0,e.Wm)(a,{text:">= 1.0.0"})]),rn,(0,e.Wm)("h3",dn,[mn,hn,kn,gn,(0,e.Wm)(a,{text:">= 1.0.0"})]),bn,(0,e.Wm)("h3",vn,[fn,qn,xn,Wn,(0,e.Wm)(a,{text:">= 2.1.1"})]),jn,(0,e.Wm)("h3",yn,[wn,Un,Sn,En,(0,e.Wm)(a,{text:">= 2.1.1"})]),Tn,(0,e.Wm)("h3",Rn,[$n,_n,An,Nn,(0,e.Wm)(a,{text:">= 2.1.1"})]),Dn,(0,e.Wm)("h3",Bn,[In,Cn,Ln,zn,(0,e.Wm)(a,{text:">= 1.0.0"})]),Fn,(0,e.Wm)("h3",Pn,[Gn,Hn,Yn,Jn,(0,e.Wm)(a,{text:">= 1.0.0"})]),Kn,(0,e.Wm)("h3",Mn,[On,Qn,Vn,Xn,(0,e.Wm)(a,{text:">= 2.1.1"})]),Zn,(0,e.Wm)("h3",ns,[ss,as,es,ts,(0,e.Wm)(a,{text:">= 2.1.1"})]),os,(0,e.Wm)("h3",cs,[ps,is,ls,us,(0,e.Wm)(a,{text:">= 2.1.1"})]),rs,(0,e.Wm)("h3",ds,[ms,hs,ks,gs,(0,e.Wm)(a,{text:">= 1.0.0"})]),bs,(0,e.Wm)("h3",vs,[fs,qs,xs,Ws,(0,e.Wm)(a,{text:">= 1.0.0"})]),js,(0,e.Wm)("h3",ys,[ws,Us,Ss,Es,(0,e.Wm)(a,{text:">= 1.0.0"})]),Ts,(0,e.Wm)("h3",Rs,[$s,_s,As,Ns,(0,e.Wm)(a,{text:">= 1.0.0"})]),Ds,(0,e.Wm)("h3",Bs,[Is,Cs,Ls,zs,(0,e.Wm)(a,{text:">= 1.0.0"})]),Fs],64)}}}}]);