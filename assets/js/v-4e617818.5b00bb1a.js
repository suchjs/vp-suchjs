"use strict";(self.webpackChunksuchjs_com=self.webpackChunksuchjs_com||[]).push([[586],{7613:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-4e617818",path:"/en/types/cascader.html",title:":cascader",lang:"en-US",frontmatter:{lang:"en-US",title:":cascader",description:"suchjs built-in type cascader"},excerpt:"",headers:[],filePathRelative:"en/types/cascader.md",git:{contributors:[]}}},5509:(n,a,s)=>{s.r(a),s.d(a,{default:()=>l});var e=s(6252);const t={id:"cascader-type-description",tabindex:"-1"},o=(0,e.Wm)("a",{class:"header-anchor",href:"#cascader-type-description","aria-hidden":"true"},"#",-1),p=(0,e.Uk)(),c=(0,e.Wm)("code",null,":cascader",-1),r=(0,e.Uk)(" type description "),i=(0,e.uE)('<p><code>:cascader</code> can use it to mock a multilevel linkage data, there are also some difference between Nodejs environment and browser.</p><ul><li><p>how to write the linkage root node</p><h5 id="in-nodejs" tabindex="-1"><a class="header-anchor" href="#in-nodejs" aria-hidden="true">#</a> In Nodejs</h5><p><code>:cascader:&amp;&lt;dataDir&gt;/cascader.json:#[root=true]</code></p><ul><li><p><code>&amp;</code> a path <code>data attribute</code> , followed by linkage data that needs to be pointed</p></li><li><p><code>#[]</code> a configuration <code>data attribute</code>, contains two fields:</p><ul><li><p><code>root</code> required, need be set <code>true</code></p></li><li><p><code>handle</code> optional,the function handle to process the cascaded. The function contains two parameters: the first parameter is the linkage data obtained from the path, and the second parameter is the data array from the first level to the current level that has been obtained. If the handle is not provided, Suchjs provides a default function handle for processing object. You can see in the source code in <code>src/helpers/utils.ts</code></p></li></ul></li></ul><h5 id="in-browser" tabindex="-1"><a class="header-anchor" href="#in-browser" aria-hidden="true">#</a> In browser</h5><p><code>:cascader:#[root=true,data=xxx]</code> Note: After v2.1.7, the <code>root</code> configuration parameter is no longer necessary, more concise.</p><p>Unlike the Nodejs environment, the browser needs to actively inject a <code>data</code> field by set a configuration <code>data attribute</code>.</p><ul><li><code>#[]</code> the configuration <code>data attribute</code>s are the same as the Nodejs environment, but an additional <code>data</code> field need be set。</li></ul></li><li><p>how to write a linkage child node</p><p>There is no difference between the writing method of the linkage child node in the Nodejs environment and the browser side. Both of them only need to provide a path reference like the <code>:ref</code> type.</p><ul><li><code>&amp;</code> path <code>data attribute</code>, followed by a field of the upper level data.</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Nodejs environment</span>\n<span class="token comment">// Provide a json file with a structure similar to the `countries` variable </span>\n<span class="token comment">// in the browser example under Nodejs</span>\n<span class="token keyword">const</span> instance <span class="token operator">=</span> Such<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  country<span class="token operator">:</span> <span class="token string">&quot;:cascader:&amp;&lt;dataDir&gt;/country.json:#[root=true]&quot;</span><span class="token punctuation">,</span>\n  city<span class="token operator">:</span> <span class="token string">&quot;:cascader:&amp;./country&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// browser</span>\n<span class="token keyword">const</span> countries <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;China&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;BeiJing&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ShangHai&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;America&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;New York&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Los Angeles&#39;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nSuch<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">&#39;counties&#39;</span><span class="token punctuation">,</span> counties<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> instance <span class="token operator">=</span> Such<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  country<span class="token operator">:</span> <span class="token string">&quot;:cascader:#[root=true,data=counties]&quot;</span><span class="token punctuation">,</span>\n  city<span class="token operator">:</span> <span class="token string">&quot;:cascader:&amp;./country&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// mock a data</span>\ninstance<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ninstance<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// the output is similar to：</span>\n<span class="token comment">/*\n// one\n{\n  country: &quot;China&quot;, \n  city: &quot;BeiJing&quot;,\n}\n// two\n{\n  country: &quot;America&quot;, \n  city: &quot;Los Angeles&quot;,\n}\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div>',3),l={render:function(n,a){const s=(0,e.up)("Badge");return(0,e.wg)(),(0,e.j4)(e.HY,null,[(0,e.Wm)("h4",t,[o,p,c,r,(0,e.Wm)(s,{text:">= 1.0.0"})]),i],64)}}}}]);