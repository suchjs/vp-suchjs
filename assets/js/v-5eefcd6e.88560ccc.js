"use strict";(self.webpackChunksuchjs_com=self.webpackChunksuchjs_com||[]).push([[338],{3696:(e,a,n)=>{n.r(a),n.d(a,{data:()=>s});const s={key:"v-5eefcd6e",path:"/en/types/ref.html",title:":ref",lang:"en-US",frontmatter:{lang:"en-US",title:":ref",description:"suchjs"},excerpt:"",headers:[],filePathRelative:"en/types/ref.md",git:{contributors:[]}}},6882:(e,a,n)=>{n.r(a),n.d(a,{default:()=>c});var s=n(6252);const t={id:"ref-type-description",tabindex:"-1"},o=(0,s.Wm)("a",{class:"header-anchor",href:"#ref-type-description","aria-hidden":"true"},"#",-1),i=(0,s.Uk)(),r=(0,s.Wm)("code",null,"ref",-1),p=(0,s.Uk)(" type description "),l=(0,s.uE)('<p><code>:ref</code> type refers to other fields, and is generally used to combine the values ​​of multiple fields.</p><ul><li><p><code>&amp;</code> followed by a reference path, the main <code>data attribute</code> of the <code>:ref</code> type is the referenced path. The path is written in a similar way to xml&#39;s <code>xpath</code>. Multiple paths are separated by commas <code>,</code>. If a single path is referenced, the value corresponding to the path will be directly assigned to the <code>:ref</code> field, if there are multiple paths, an array of multi-path values ​​will be generated. In addition, it is important to note that <code>:ref</code> is immediately-invoked value, which means that if the reference path appears after the <code>:ref</code> field, <del>the value of <code>undefined</code> will be obtained</del> will trigger an error after version <code>v1.1.1</code>; if the reference path corresponds to the same-level field of the array, it will get the value of the current sibling field in same indexed.</p></li><li><p>From version <code>v1.1.1</code>, the path string supports <code>\\</code> to escape special characters, so that it is convenient to support fields containing special characters when corresponding to data field paths.</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  firstName<span class="token operator">:</span> <span class="token string">&quot;Michael&quot;</span><span class="token punctuation">,</span>\n  lastName<span class="token operator">:</span> <span class="token string">&quot;Jordan&quot;</span><span class="token punctuation">,</span>\n  fullName<span class="token operator">:</span> <span class="token string">&quot;:ref:&amp;./firstName,./lastName:@join(&#39; &#39;)&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Output is similar to below:</span>\n<span class="token comment">// {firstName: &quot;Michael&quot;, lastName: &quot;Jordan&quot;, fullName: &quot;Michael Jordan&quot;}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',3),c={render:function(e,a){const n=(0,s.up)("Badge");return(0,s.wg)(),(0,s.j4)(s.HY,null,[(0,s.Wm)("h4",t,[o,i,r,p,(0,s.Wm)(n,{text:">= 1.0.0"})]),l],64)}}}}]);