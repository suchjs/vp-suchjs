"use strict";(self.webpackChunksuchjs_com=self.webpackChunksuchjs_com||[]).push([[255],{3389:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-0d9af0f8",path:"/api.html",title:"接口API",lang:"zh-CN",frontmatter:{lang:"zh-CN",title:"接口API",description:"suchjs接口"},excerpt:"",headers:[{level:3,title:"Such.define",slug:"such-define",children:[]},{level:3,title:"Such.parser",slug:"such-parser",children:[]},{level:3,title:"Such.alias",slug:"such-alias",children:[]},{level:3,title:"Such.config",slug:"such-config",children:[]},{level:3,title:"Such.assign",slug:"such-assign",children:[]},{level:3,title:"Such.instance",slug:"such-instance",children:[]},{level:3,title:"Such.as",slug:"such-as",children:[]},{level:3,title:"Such.template",slug:"such-template",children:[]}],filePathRelative:"api.md",git:{contributors:[]}}},6224:(n,s,a)=>{a.r(s),a.d(s,{default:()=>bn});var p=a(6252);const t={id:"such-define",tabindex:"-1"},e=(0,p.Wm)("a",{class:"header-anchor",href:"#such-define","aria-hidden":"true"},"#",-1),o=(0,p.Uk)(),c=(0,p.Wm)("code",null,"Such.define",-1),u=(0,p.Uk)(),l=(0,p.uE)('<p><code>Such.define</code> 是 Suchjs 自定义类型的入口方法，包括配置文件，都是调用该方法来增加自定义类型。它接受四种形式的参数，分别对应不同的情形。</p><ul><li><p>第一种形式：基于已有类型，通过固定某些数据属性来获得一种新类型，内置的扩展类型大多是通过这种方式来定义的。</p><p><code>Such.define(newType: string, baseType: string, properties: string)</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 示例</span>\nSuch<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&quot;integer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>第二种形式：通过提供生成数据的 <code>generate</code> 函数来定义新类型，这种情况比较适合不需要提供任何数据属性参数的类型。</p><p><code>Such.define(newType: string, generate: (options: TSuchInject) =&gt; unkown)</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 扩展的boolean类型</span>\nSuch<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&quot;boolean&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> such</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 第二个参数提供了 Such 类，方便用它上面挂载的utils方法</span>\n  <span class="token comment">// 也方便通过其它模拟数据来组合其它数据</span>\n  <span class="token keyword">return</span> such<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">isOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 扩展一个rgb颜色类型</span>\nSuch<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&quot;color$rgb&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> such</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 因为rgb的值都是随机的0到255之间</span>\n  <span class="token comment">// 所以可以定义一个0到255值中间的随机实例</span>\n  <span class="token keyword">const</span> instance <span class="token operator">=</span> such<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token string">&quot;:int[0,255]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token string">&quot;rgb(&quot;</span> <span class="token operator">+</span> <span class="token punctuation">[</span>instance<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>第三种形式：通过提供完整的配置参数来创建一个新类型，该方式接近于 Suchjs 内置基础类型的定义方式。</p><p><code>Such.define(newType: string, config: TMFactoryOptions)</code></p><p><code>TMFactoryOptions</code> 的定义如下：</p><ul><li><p><code>param</code> 可选，对应于第一种形式中的 <code>properties</code> 数据属性，相当于提供了默认的数据属性配置。</p></li><li><p><code>init(utils: typeof Such.utils)</code> 可选，初始化时要执行的方法，主要针对参数的解析和参数数据的格式化，为了保证 this 的指向，请勿使用箭头函数，参数 <code>utils</code> 指向 Such.utils。</p></li><li><p><code>genreate(options?: TSuchInject, such?: Such)</code> 必选，生成模拟数据最终要执行的方法，该方法接受一个 options 参数及 Such 类注入，其中 options <code>TSuchInject</code> 定义包含了以下参数：</p><ul><li><code>datas</code> 运行到当前模拟字段时已经生成的整个模拟数据，数据以深度优先的方式逐步生成。</li><li><code>mocker</code> 当前数据使用的 mocker 对象实例，其上有 <code>parent</code> 父 mocker 对象，<code>root</code>根 mocker 对象，整个以树状的形式组织。同时对象上有 <code>storeData</code> 字段，可以用来存储 <code>mocker</code> 对象上需要保存的一些数据，比如 <code>:increment</code> 类型就会保存上次生成的 id 值，方便下次生成时能保持数据值的更新。</li><li><code>dpath</code> 当前要生成的数据字段的路径值，类似于 <code>xpath</code> 的形式。</li></ul></li><li><p><code>reGenerate</code> 可选，该种形式中会忽略该参数，第四种形式的定义方式可以用来覆盖原类型的 <code>generate</code> 方法。</p></li><li><p><code>configOptions</code> 可选，对应 <code>#[]</code> 的配置属性，可以用来设置某些参数的默认值和数据类型，与 <code>vue</code> 声明接受的属性参数时类似。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&quot;datetime&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  param<span class="token operator">:</span> <span class="token string">&quot;%yyyy-mm-dd HH\\\\:MM\\\\:ss&quot;</span><span class="token punctuation">,</span>\n  <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">utils</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// range</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addRule</span><span class="token punctuation">(</span><span class="token string">&quot;$size&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$size</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>$size<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> range <span class="token punctuation">}</span> <span class="token operator">=</span> $size<span class="token punctuation">;</span>\n      <span class="token keyword">const</span> <span class="token function-variable function">makeDate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> date<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>strRule<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          date <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">strtotime</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">invalid date:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>param<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> date<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>range<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">the time range should supply 2 arguments,but got </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>range<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token punctuation">[</span>start<span class="token punctuation">,</span> end<span class="token punctuation">]</span> <span class="token operator">=</span> range<span class="token punctuation">;</span>\n        <span class="token keyword">const</span> startdate <span class="token operator">=</span> <span class="token function">makeDate</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> enddate <span class="token operator">=</span> <span class="token function">makeDate</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> starttime <span class="token operator">=</span> startdate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> endtime <span class="token operator">=</span> enddate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>endtime <span class="token operator">&lt;</span> starttime<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>\n            <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">the time range of start time </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>start<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is big than end time </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>end<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            range<span class="token operator">:</span> <span class="token punctuation">[</span>starttime<span class="token punctuation">,</span> endtime<span class="token punctuation">]</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// $format rule</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addRule</span><span class="token punctuation">(</span><span class="token string">&quot;$format&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$format</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// nothing</span>\n      <span class="token keyword">let</span> <span class="token punctuation">{</span> format <span class="token punctuation">}</span> <span class="token operator">=</span> $format<span class="token punctuation">;</span>\n      format <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">decodeTrans</span><span class="token punctuation">(</span>format<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        format<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// modifier</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addModifier</span><span class="token punctuation">(</span><span class="token string">&quot;$format&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> $format</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> format <span class="token punctuation">}</span> <span class="token operator">=</span> $format<span class="token punctuation">;</span>\n      <span class="token keyword">return</span> utils<span class="token punctuation">.</span><span class="token function">dateformat</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">generate</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> such</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> $size <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>params<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> utils <span class="token punctuation">}</span> <span class="token operator">=</span> such<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> range <span class="token operator">=</span> <span class="token punctuation">(</span>\n      $size <span class="token operator">??</span> <span class="token punctuation">{</span>\n        range<span class="token operator">:</span> <span class="token punctuation">[</span>\n          utils<span class="token punctuation">.</span><span class="token function">strtotime</span><span class="token punctuation">(</span><span class="token string">&quot;-10 year&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          utils<span class="token punctuation">.</span><span class="token function">strtotime</span><span class="token punctuation">(</span><span class="token string">&quot;+10 year&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">.</span>range<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> time <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">makeRandom</span><span class="token punctuation">(</span>range<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> range<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br></div></div></li><li><p>第四种形式：与第三种方式类似，不过多增加了一个继承类型<code>baseType</code>参数，书写方式与第三种类似，这种情形目前比较少用。</p><p><code>Such.define(newType: string, baseType: string, config: TMFactoryOptions)</code></p><p><code>config</code> 参数可以参考第三种形式的说明，在该方式定义下，<code>reGenerate</code> 的数据生成函数将可以替代 <code>baseType</code> 的生成函数，这样基本完全覆写了 <code>baseType</code>，这种需求一般比较少见，但接口依然给予了可以操作的可能性。</p></li></ul></li></ul>',2),i={id:"such-parser",tabindex:"-1"},r=(0,p.Wm)("a",{class:"header-anchor",href:"#such-parser","aria-hidden":"true"},"#",-1),k=(0,p.Uk)(),m=(0,p.Wm)("code",null,"Such.parser",-1),b=(0,p.Uk)(),d=(0,p.uE)('<p>Suchjs 中的 <code>parser</code> 是针对的数据属性的解析，目前已有的内置 <code>parser</code> 包括：</p><ul><li><code>[min,max]</code> 用来解析大小范围，如 <code>[1,100]</code></li><li><code>{least[,most]}</code> 用来解析长度大小，如 <code>{3}</code>, <code>{3,5}</code></li><li><code>%</code> 用来解析格式化，后接 <code>format</code> 格式，如数字类型的 <code>%.2f</code>，日期类型的 <code>%yyyy-mm-dd</code></li><li><code>/</code> 用来解析正则路径，后接 <code>pattern</code>，如正则的 <code>/\\w/</code></li><li><code>&amp;</code> 用来传递路径，间隔符为英文逗号 <code>,</code>，如 <code>:ref</code> 类型的 <code>&amp;./firstName,./lastName</code>，，或者词典类型的数据地址 <code>&amp;&lt;dataDir&gt;/dict.txt</code></li><li><code>@</code> 用来解析函数调用，间隔符为竖线 <code>|</code>，如 <code>@repeat(3)|join(&#39;&#39;)</code></li><li><code>#[key=value]</code> 用来解析参数配置，间隔符为英文逗号 <code>,</code>，如 <code>:increment</code> 类型设置 <code>#[start=0,step=2]</code></li></ul><p>一般数据类型，这些基本的数据属性已经够用，但如果这些属性配置还不能满足你的需求，你就可以通过 <code>Such.parser</code> 新增一种数据属性。</p><p><code>Such.parser(name: string, params: {config: IParserConfig, parse: () =&gt; void, setting: TObj})</code></p><p>各个参数的说明如下：</p><ul><li><p><code>name</code> 定义解析器的名称</p></li><li><p><code>params</code> 解析器解析时用到的相关配置</p><ul><li><p><code>config</code> 类型为 <code>IParserConfig</code>，该类型的定义为：</p><ul><li><p><code>startTag</code> 字符串数组类型，表示 <code>parser</code> 的开始标记符</p></li><li><p><code>endTag</code> 字符串数组类型，表示 <code>parser</code> 的结束标记符</p></li><li><p><code>separator</code> 如果数据要支持分组，多个分组之间的间隔符，注意间隔符不能和多个数据属性自身使用的分隔符 <code>:</code> 相同</p></li><li><p><code>pattern</code> 正则表达式，对于分组，如果单纯的 <code>separator</code> 不能简单的分隔分组，就可以设置 <code>pattern</code> 来分隔分组</p></li><li><p><code>rule</code> 正则表达式，如果不能简单的使用开始和结束标记符来匹配到整个数据属性值，就可以设置 <code>rule</code> 来整体匹配。</p></li></ul></li><li><p><code>parse: () =&gt; void</code> 在通过以上配置，获得解析后的字符串数据之后，由该 <code>parse</code> 方法进一步解析成可用的数据，由于在该 <code>parse</code> 方法中，会需要用到继承的父类 <code>Parser</code> 的通用方法，所以该 <code>parse</code> 方法不要使用箭头函数，以保证 <code>this</code> 的正确指向。</p></li><li><p><code>setting</code> 配置对象，目前暂时就提供 <code>frozen</code> 的布尔类型配置参数，使用了 <code>frozen</code> 表明该数据属性不能被重复设置，可以重复设置的数据属性，比如配置属性，<code>#[a=1]:#[b=1]</code>，最终数据会进行 <code>merge</code> 合并。</p></li></ul></li></ul><p>现在按照上面的方式来新增一个 <code>parser</code>，代码如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 定义一个解析器来解析形如 `(1,2,&quot;hello,world&quot;,3,&#39;good job!&#39;)`</span>\n<span class="token comment">// 该格式以左小括号 `(` 开头，右小括号 `)` 结尾</span>\n<span class="token comment">// 以英文逗号 `,` 为分隔</span>\n<span class="token comment">// 因为字符串里可能存在英文逗号 `,`，所以需要设置 pattern 来做复杂匹配</span>\nSuch<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token string">&quot;numberAndString&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  config<span class="token operator">:</span> <span class="token punctuation">{</span>\n    startTag<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    endTag<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;)&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    separator<span class="token operator">:</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span>\n    pattern<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*(?:([&#39;&quot;])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\d+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> patterns <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    patterns<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">match</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 字符串形式</span>\n      <span class="token keyword">let</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> quote<span class="token punctuation">]</span> <span class="token operator">=</span> match<span class="token punctuation">;</span>\n      value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>quote<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 数字形式</span>\n        data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> data<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  setting<span class="token operator">:</span> <span class="token punctuation">{</span>\n    frozen<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 定义好 `parser` 后，我们来定义一个自定义类型，并解析该 `parser` 的数据。</span>\nSuch<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&quot;showdata&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 定义对解析器解析到的 numberAndString 做进一步处理</span>\n    <span class="token comment">// addRule 对应的第一个参数名与定义的 parser 名保持一致</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addRule</span><span class="token punctuation">(</span><span class="token string">&quot;numberAndString&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">numAndStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>numAndStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> strings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      numAndStr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          strings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          numbers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        numbers<span class="token punctuation">,</span>\n        strings<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">generate</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> such</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 最终数据会被解析到params内，key为parser的name名称</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> numberAndString <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>params<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> numbers<span class="token punctuation">,</span> strings <span class="token punctuation">}</span> <span class="token operator">=</span> numberAndString<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> totalNum <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>totalNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> index <span class="token operator">=</span> such<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">makeRandom</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> totalNum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">number:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>numbers<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> totalStr <span class="token operator">=</span> strings<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>totalStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> index <span class="token operator">=</span> such<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">makeRandom</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> totalStr <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">string:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>strings<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> ret<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;|&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 现在就可以用自定义的类型来模拟数据了</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;:showdata:(1, 2, &quot;hello&quot;, 3, 4, &quot;world&quot;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 将输出 `number:1|string:world`，`number:4|string:hello` 等等</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br></div></div>',8),g={id:"such-alias",tabindex:"-1"},h=(0,p.Wm)("a",{class:"header-anchor",href:"#such-alias","aria-hidden":"true"},"#",-1),f=(0,p.Uk)(),y=(0,p.Wm)("code",null,"Such.alias",-1),q=(0,p.Uk)(),w=(0,p.uE)('<p>定义类型别名，它的调用方式比较简单，用来对一些长类型名增加简写别名。</p><p><code>Such.alias(alias: string, fromType: string)</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 为integer类型增加一个别名int</span>\nSuch<span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">&quot;int&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;integer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',3),v={id:"such-config",tabindex:"-1"},S=(0,p.Wm)("a",{class:"header-anchor",href:"#such-config","aria-hidden":"true"},"#",-1),x=(0,p.Uk)(),j=(0,p.Wm)("code",null,"Such.config",-1),W=(0,p.Uk)(),T=(0,p.uE)('<p>有了以上的三个方法，我们就可以很方便的对整个 Suchjs 支持的类型进行扩展了，为方便快速定义这些数据，Suchjs 提供了该方法来对数据进行加载。</p><p><code>Such.config(settings: TSuchSettings)</code></p><p>现在以示例代码的方式来描述 <code>settings</code> 的格式。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 这里对应会使用 `Such.parser` 方法进行调用</span>\n  parsers<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// key 为对应parser的名称，值为第二个解析配置参数</span>\n    numberAndString<span class="token operator">:</span> <span class="token punctuation">{</span>\n      config<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...代码可参考上方定义parser的章节</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 这里对应会使用 `Such.define` 方法进行调用</span>\n  <span class="token comment">// 其中 key 为定义的type类型名称</span>\n  <span class="token comment">// 对于数组value值，会以apply的方式进行参数展开</span>\n  types<span class="token operator">:</span> <span class="token punctuation">{</span>\n    integer<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">boolean</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> such</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> such<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">isOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 这里会调用 `Such.alias` 来创建别名</span>\n  <span class="token comment">// key为别名名称，value为原始类型名</span>\n  alias<span class="token operator">:</span> <span class="token punctuation">{</span>\n    int<span class="token operator">:</span> <span class="token string">&quot;integer&quot;</span><span class="token punctuation">,</span>\n    bool<span class="token operator">:</span> <span class="token string">&quot;boolean&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 以下配置仅在Node环境下使用</span>\n  <span class="token comment">// 对应的是一个与当前配置文件格式一致的导出文件</span>\n  <span class="token comment">// 格式可以是json，也可以是CMD模块，以&#39;such:&#39;开头的是内置模块</span>\n  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;such:recommend&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// 文件路径、预加载配置</span>\n  config<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 是否预加载所有数据文件，这里主要针对词典类型和级联类型</span>\n    <span class="token comment">// 可以是布尔型，true表示预加载所有文件</span>\n    <span class="token comment">// 也可以是个数组，指定要预加载的数据文件</span>\n    preload<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token comment">// 在node环境下，Such.as(&#39;*.json&#39;) 会直接从该目录下获取json文件</span>\n    <span class="token comment">// 以该json文件为配置生成模拟数据</span>\n    suchDir<span class="token operator">:</span> <span class="token string">&quot;suchas&quot;</span><span class="token punctuation">,</span>\n    <span class="token comment">// 存放数据文件的路径</span>\n    dataDir<span class="token operator">:</span> <span class="token string">&quot;suchas/data&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div>',4),U={id:"such-assign",tabindex:"-1"},A=(0,p.Wm)("a",{class:"header-anchor",href:"#such-assign","aria-hidden":"true"},"#",-1),$=(0,p.Uk)(),O=(0,p.Wm)("code",null,"Such.assign",-1),I=(0,p.Uk)(),D=(0,p.uE)('<p>前面提到我们所有的数据模拟都支持 <code>@</code> 开头的函数调用以及 <code>#[key=value]</code> 方式的配置属性，那么如果我们想从外部注入函数调用时要用到的函数名和配置属性中的 value 值，这时候就需要用到 <code>Such.assign</code> 了。</p><p><code>Such.assign(key: string, value: unkown)</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 定义一个字符串的截字方法</span>\nSuch<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">&quot;truncate&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> len</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> str<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 使用</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:string:{20}:@truncate(10)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 输出类似：&#39;tALIHe(|ff...&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',3),R={id:"such-instance",tabindex:"-1"},N=(0,p.Wm)("a",{class:"header-anchor",href:"#such-instance","aria-hidden":"true"},"#",-1),z=(0,p.Uk)(),E=(0,p.Wm)("code",null,"Such.instance",-1),C=(0,p.Uk)(),P=(0,p.uE)('<p>提供了一个直接生成 Such 模拟对象实例的静态方法，如果你的数据需要多次生成，这样可以使用它来创建一个实例；静态方法 <code>Such.as(target, options?)</code> 其实就是使用该方法创建的一个语法糖，<code>Such.instance(target, options?).a()</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> IDGenerator <span class="token operator">=</span> Such<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token string">&quot;:increment&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 实例上有 `a()` 方法</span>\n<span class="token comment">// 生成一个模拟数据</span>\nIDGenerator<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\nIDGenerator<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>从 <code>v1.2.0</code> 版本后开始增加了调用 <code>a(instanceOptions?: IAInstanceOptions)</code> 方法时支持 <code>instanceOptions</code> 的可选参数，该参数目前支持 <code>keys</code> 字段的配置，通过数据的 path 路径作为 <code>key</code>，以 <code>{min?: number, max?: number}</code> 的值作为 <code>value</code>，用来精确每一次模拟数据使用不同的配置。目前它主要针对的是可选字段、以及数组字段。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 该参数的格式为</span>\n<span class="token keyword">type</span> <span class="token class-name">IAInstanceOptions</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  keys<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      min<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n      max<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n      exist<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n      index<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 对应的 `key` 为 path 路径，指定该路径对应的字段的出现次数</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 配置可选字段示例</span>\n<span class="token keyword">const</span> genOptional <span class="token operator">=</span> Such<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&quot;optional?&quot;</span><span class="token operator">:</span> <span class="token string">&quot;:boolean&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 直接调用不带参数，这里上面的optional字段可能存在也可能不存在</span>\ngenOptional<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 增加instanceOptions参数</span>\n<span class="token comment">// 以下调用 optional 字段一直不会存在</span>\ngenOptional<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  keys<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;/optional&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// max 为 0，表示 optional 字段出现次数只能为0</span>\n      <span class="token comment">// 这里等价于 exist: false</span>\n      <span class="token comment">// 如果字段为可选，同时具备数组长度值的话，应直接使用exist</span>\n      max<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 以下调用 optional 字段将一直存在</span>\ngenOptional<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  keys<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;/optional&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// min 为 1，表示 optional 字段出现次数只能为1</span>\n      <span class="token comment">// 这里等价于 exist: true</span>\n      <span class="token comment">// 如果字段为可选，同时具备数组长度值的话，应直接使用exist</span>\n      min<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 配置数组字段示例</span>\n<span class="token keyword">const</span> genArray <span class="token operator">=</span> Such<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&quot;array{5,10}&quot;</span><span class="token operator">:</span> <span class="token string">&quot;:number&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 直接调用不带参数，这样数组的长度为 5 到 10</span>\ngenArray<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 增加instanceOptions参数</span>\n<span class="token comment">// 下面的参数将把 array 数组的长度限制在 6 到 8</span>\n<span class="token comment">// 注意该参数的范围只能在原始范围内收窄，而不能拓宽</span>\ngenOptional<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  keys<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;/array&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      min<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>\n      max<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 以下调用将把 array 数组的长度确定为 6 条</span>\ngenOptional<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  keys<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;/array&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      min<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>\n      max<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 针对枚举类型，还可以指定枚举的index值</span>\n<span class="token keyword">const</span> genResult <span class="token operator">=</span> Such<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&quot;errno{1}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ngenResult<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  keys<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;/errno&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      index<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 以上示例生成 {errno: 0}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div>',6),_={id:"such-as",tabindex:"-1"},M=(0,p.Wm)("a",{class:"header-anchor",href:"#such-as","aria-hidden":"true"},"#",-1),G=(0,p.Uk)(),F=(0,p.Wm)("code",null,"Such.as",-1),H=(0,p.Uk)(),L=(0,p.Wm)("p",null,[(0,p.Uk)("如上 "),(0,p.Wm)("code",null,"Such.instance"),(0,p.Uk)(" 静态方法所说，该方法提供了仅需要一次调用生成一次模拟数据的快速方法入口。")],-1),B={id:"such-template",tabindex:"-1"},Y=(0,p.Wm)("a",{class:"header-anchor",href:"#such-template","aria-hidden":"true"},"#",-1),J=(0,p.Uk)(),K=(0,p.Wm)("code",null,"Such.template",-1),Q=(0,p.Uk)(),V=(0,p.Uk)("该方法也是"),X=(0,p.Wm)("code",null,"模板字符串类型",-1),Z=(0,p.Uk)("实际调用的方法，不同的是它不需要前导的三冒号 "),nn=(0,p.Wm)("code",null,":::",-1),sn=(0,p.Uk)(' 作为类型标识。它接受一个字符串模板，如果是数据类型变量，可以用（backtick => "`"） 符号进行包裹。如果后面还有其它的模板字符串类型参数，仍然使用三冒号 '),an=(0,p.Wm)("code",null,":::",-1),pn=(0,p.Uk)(" 标识模板字符串已经书写结束，后面的字符串将作为类型的 "),tn=(0,p.Wm)("code",null,"data attributes",-1),en=(0,p.Uk)(" 进行解析。目前版本支持的 "),on=(0,p.Wm)("code",null,"data attributes",-1),cn=(0,p.Uk)(" 只包括 "),un=(0,p.Wm)("code",null,"{3}",-1),ln=(0,p.Uk)(" 这样的长度属性，表示对前面的模板字符串进行多少次重复。如果需要输出正常的 backtick ` 符号，或者正常的三冒号，请在前面加上反斜杠 "),rn=(0,p.Wm)("code",null,"\\\\",-1),kn=(0,p.Uk)(" 进行转义。"),mn=(0,p.uE)('<p><code>Such.template(key: string, path?: TFieldPath): Template</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 单独调用时，不需要提供第二个类xpath路径的path参数</span>\n<span class="token comment">// 该参数主要在使用模板字符串类型时提供，方便对错误进行更好提示</span>\nSuch<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">&quot;dict&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;bear&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rabbit&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> tmpl <span class="token operator">=</span> Such<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span>\n  <span class="token string">&quot;i spent `:number:[50,100]` dollars to buy a `:dict:#[data=dict]` toy.&quot;</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 和such的实例一样，上面有 a() 方法，调用a方法输出模拟数据</span>\ntmpl<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> ucaseTmpl <span class="token operator">=</span> Such<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token string">&quot;`:uppercase:{3}`:::{3}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nucaseTmpl<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出类似 &quot;ACDACDACD&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>以上基本就是 Suchjs 提供的主要 API 了，其它的 API 可能会随着版本的更迭进行增改。如果有好的意见，欢迎在 github 里提供反馈。</p><p>Nodejs 环境下还有些基于数据缓存、加载与更新的一些 API，将会有单独的章节来说明。</p>',4),bn={render:function(n,s){const a=(0,p.up)("Badge"),bn=(0,p.up)("RouterLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[(0,p.Wm)("h3",t,[e,o,c,u,(0,p.Wm)(a,{text:">= 1.0.0"})]),l,(0,p.Wm)("h3",i,[r,k,m,b,(0,p.Wm)(a,{text:">= 1.0.0"})]),d,(0,p.Wm)("h3",g,[h,f,y,q,(0,p.Wm)(a,{text:">= 1.0.0"})]),w,(0,p.Wm)("h3",v,[S,x,j,W,(0,p.Wm)(a,{text:">= 1.0.0"})]),T,(0,p.Wm)("h3",U,[A,$,O,I,(0,p.Wm)(a,{text:">= 1.0.0"})]),D,(0,p.Wm)("h3",R,[N,z,E,C,(0,p.Wm)(a,{text:">= 1.0.0"})]),P,(0,p.Wm)("h3",_,[M,G,F,H,(0,p.Wm)(a,{text:">= 1.0.0"})]),L,(0,p.Wm)("h3",B,[Y,J,K,Q,(0,p.Wm)(a,{text:">= 1.1.0"})]),(0,p.Wm)("p",null,[V,(0,p.Wm)(bn,{to:"/types/template.html"},{default:(0,p.w5)((()=>[X])),_:1}),Z,nn,sn,an,pn,tn,en,on,cn,un,ln,rn,kn]),mn],64)}}}}]);