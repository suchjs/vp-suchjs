"use strict";(self.webpackChunksuchjs_com=self.webpackChunksuchjs_com||[]).push([[0],{1810:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-57ff310c",path:"/en/api.html",title:"APIs",lang:"en-US",frontmatter:{lang:"en-US",title:"APIs",description:"APIs of suchjs"},excerpt:"",headers:[{level:3,title:"Such.define",slug:"such-define",children:[]},{level:3,title:"Such.parser",slug:"such-parser",children:[]},{level:3,title:"Such.alias",slug:"such-alias",children:[]},{level:3,title:"Such.config",slug:"such-config",children:[]},{level:3,title:"Such.assign",slug:"such-assign",children:[]},{level:3,title:"Such.instance",slug:"such-instance",children:[]},{level:3,title:"Such.as",slug:"such-as",children:[]},{level:3,title:"Such.template",slug:"such-template",children:[]}],filePathRelative:"en/api.md",git:{contributors:[]}}},2978:(n,s,a)=>{a.r(s),a.d(s,{default:()=>sn});var t=a(6252);const p={id:"such-define",tabindex:"-1"},e=(0,t.Wm)("a",{class:"header-anchor",href:"#such-define","aria-hidden":"true"},"#",-1),o=(0,t.Uk)(),c=(0,t.Wm)("code",null,"Such.define",-1),l=(0,t.Uk)(),u=(0,t.uE)('<p><code>Such.define</code> It is the entry method to difine a custom type, including a configuration data called by API <code>Such.config</code>, are called it to add data types. It accepts four kinds of parameters, corresponding to different situations.</p><ul><li><p>The first: Based on existing types, a new type is obtained by fixing certain data attributes. Most of the built-in extended types in library are defined in this way.</p><p><code>Such.define(newType: string, baseType: string, attributes: string)</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// example</span>\nSuch<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&quot;integer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>The second: Define a new type by providing the <code>generate</code> function to generate data. This way is more suitable for types that do not need to provide any data attribute parameters.</p><p><code>Such.define(newType: string, generate: (options: TSuchInject) =&gt; unkown)</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Extended boolean type</span>\nSuch<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&quot;boolean&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> such</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// The second parameter provides the Such class,</span>\n  <span class="token comment">// which is convenient to use the utils method mounted on it</span>\n  <span class="token comment">// It is also convenient to combine other data through other simulation data</span>\n  <span class="token keyword">return</span> such<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">isOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Extend an rgb color type</span>\nSuch<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&quot;color$rgb&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> such</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Because the value of rgb is random between 0 and 255</span>\n  <span class="token comment">// So you can define a random instance between 0 and 255</span>\n  <span class="token keyword">const</span> instance <span class="token operator">=</span> such<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token string">&quot;:int[0,255]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token string">&quot;rgb(&quot;</span> <span class="token operator">+</span> <span class="token punctuation">[</span>instance<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li><li><p>The third: Create a new type by providing complete configuration parameters, which is close to the definition how the library define built-in basic types.</p><p><code>Such.define(newType: string, config: TMFactoryOptions)</code></p><p>The definition of <code>TMFactoryOptions</code> is as follows:</p><ul><li><p><code>param</code> optional, corresponding to the <code>attributes</code> data attribute in the first form, which is equivalent to providing the default <code>data attribute</code>s.</p></li><li><p><code>init(utils: typeof Such.utils)</code> optional, the method to be executed during initialization, is mainly for <code>data attribute</code> parsing and formatting. In order to ensure the scope of <code>this</code>, please do not use arrow functions. The parameter <code>utils</code> are injected by <code>Such.utils</code>.</p></li><li><p><code>genreate(options?: TSuchInject, such?: Such)</code> required, the method to be finally executed to generate mocking data. This method accepts an options parameter and Such class injection. The definition of options <code>TSuchInject</code> contains the following parameters:</p><ul><li><p><code>datas</code> The entire mocking data that has been generated when the <code>mocker</code> runs to the current field, the data is gradually generated in a depth-first manner.</p></li><li><p><code>mocker</code> The mocker object instance used by the current field, which has a <code>parent</code> mocker object and a <code>root</code> mocker object, organized in a tree-like structure. At the same time, there is a <code>storeData</code> field on the object, which can be used to store some data that needs to be saved on the <code>mocker</code> object. For example, the <code>:increment</code> type will save the id value generated last time, so that the data value can be maintained during the next generation, keep the data in updated.</p></li><li><p><code>dpath</code> The current path value of the data field to be generated, similar to xml&#39;s <code>xpath</code>.</p></li></ul></li><li><p><code>reGenerate</code> optional, this parameter will be ignored in this form, and the definition of next, the fourth form, can be used to override the <code>generate</code> method of the original type.</p></li><li><p><code>configOptions</code> optional, corresponding to the configuration <code>data attribute</code> of <code>#[]</code>, which can be used to set the default value and data type of certain parameters, similar to the <code>vue</code> how to declares the accepted property parameters in the child components.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&quot;datetime&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  param<span class="token operator">:</span> <span class="token string">&quot;%yyyy-mm-dd HH\\\\:MM\\\\:ss&quot;</span><span class="token punctuation">,</span>\n  <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">utils</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// range</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addRule</span><span class="token punctuation">(</span><span class="token string">&quot;$size&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$size</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>$size<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> range <span class="token punctuation">}</span> <span class="token operator">=</span> $size<span class="token punctuation">;</span>\n      <span class="token keyword">const</span> <span class="token function-variable function">makeDate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> date<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>strRule<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          date <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">strtotime</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">invalid date:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>param<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> date<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>range<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">the time range should supply 2 arguments,but got </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>range<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token punctuation">[</span>start<span class="token punctuation">,</span> end<span class="token punctuation">]</span> <span class="token operator">=</span> range<span class="token punctuation">;</span>\n        <span class="token keyword">const</span> startdate <span class="token operator">=</span> <span class="token function">makeDate</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> enddate <span class="token operator">=</span> <span class="token function">makeDate</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> starttime <span class="token operator">=</span> startdate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> endtime <span class="token operator">=</span> enddate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>endtime <span class="token operator">&lt;</span> starttime<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>\n            <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">the time range of start time </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>start<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is big than end time </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>end<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            range<span class="token operator">:</span> <span class="token punctuation">[</span>starttime<span class="token punctuation">,</span> endtime<span class="token punctuation">]</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// $format rule</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addRule</span><span class="token punctuation">(</span><span class="token string">&quot;$format&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$format</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// nothing</span>\n      <span class="token keyword">let</span> <span class="token punctuation">{</span> format <span class="token punctuation">}</span> <span class="token operator">=</span> $format<span class="token punctuation">;</span>\n      format <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">decodeTrans</span><span class="token punctuation">(</span>format<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        format<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// modifier</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addModifier</span><span class="token punctuation">(</span><span class="token string">&quot;$format&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> $format</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> format <span class="token punctuation">}</span> <span class="token operator">=</span> $format<span class="token punctuation">;</span>\n      <span class="token keyword">return</span> utils<span class="token punctuation">.</span><span class="token function">dateformat</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">generate</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> such</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> $size <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>params<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> utils <span class="token punctuation">}</span> <span class="token operator">=</span> such<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> range <span class="token operator">=</span> <span class="token punctuation">(</span>\n      $size <span class="token operator">??</span> <span class="token punctuation">{</span>\n        range<span class="token operator">:</span> <span class="token punctuation">[</span>\n          utils<span class="token punctuation">.</span><span class="token function">strtotime</span><span class="token punctuation">(</span><span class="token string">&quot;-10 year&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          utils<span class="token punctuation">.</span><span class="token function">strtotime</span><span class="token punctuation">(</span><span class="token string">&quot;+10 year&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">.</span>range<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> time <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">makeRandom</span><span class="token punctuation">(</span>range<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> range<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br></div></div></li></ul></li><li><p>The fourth: similar to the third form, but an additional inheritance type <code>baseType</code> parameter is added. This form is currently less used.</p></li></ul>',2),i={id:"such-parser",tabindex:"-1"},r=(0,t.Wm)("a",{class:"header-anchor",href:"#such-parser","aria-hidden":"true"},"#",-1),k=(0,t.Uk)(),d=(0,t.Wm)("code",null,"Such.parser",-1),m=(0,t.Uk)(),b=(0,t.uE)('<p>The <code>parser</code> in Suchjs is for the analysis of <code>data attribute</code>s. The built-in <code>parser</code>s include:</p><ul><li><p><code>[min,max]</code> is used to parse the size range, such as <code>[1,100]</code></p></li><li><p><code>{least[,most]}</code> is used to parse the length, such as <code>{3}</code>, <code>{3,5}</code></p></li><li><p><code>%</code> is used to parse and format, followed by the <code>format</code> string, such as <code>%.2f</code> for number type and <code>%yyyy-mm-dd</code> for date type</p></li><li><p><code>/</code> is used to parse the regular expression, followed by the <code>pattern</code> string, such as the regular expression <code>/\\w/</code></p></li><li><p><code>&amp;</code> is used to parse the path, multiple paths can separate by the comma <code>,</code>, such as <code>&amp;./firstName,./lastName</code> of the <code>:ref</code> type, or file path of dictionary type <code>&amp;&lt;dataDir&gt;/dict.txt</code></p></li><li><p><code>@</code> is used to parse function calls, and multiple functions separate by the vertical bar <code>|</code> as a pipe, such as <code>@repeat(3)|join(&#39;&#39;)</code></p></li><li><p><code>#[key=value]</code> is used to parse the configuration, also can use a comma <code>,</code> to separate multiple key-value pairs, such as a <code>:increment</code> type can set a configuration like <code>#[start=0,step=2]</code></p></li></ul><p>For general data types, these basic <code>data attribute</code>s are sufficient, but if you meet some needs can&#39;t cover them by those, you may need to add a new <code>data attribute</code> parser through the API <code>Such.parser</code>.</p><p><code>Such.parser(name: string, params: {config: IParserConfig, parse: () =&gt; void, setting: TObj})</code></p><p>The description of each parameter is as follows:</p><ul><li><p><code>name</code> defines the name of the parser, it also used for the parsed result&#39;s key.</p></li><li><p><code>params</code> the main parameter to define how the parser parsing data.</p><ul><li><p><code>config</code> is a typescript type <code>IParserConfig</code>, which is defined as:</p><ul><li><p><code>startTag</code> string array type, representing the start tag of <code>parser</code></p></li><li><p><code>endTag</code> string array type, representing the end tag of <code>parser</code></p></li><li><p><code>separator</code> If the data supports grouping, the separator between multiple groups, note that the separator can&#39;t be the same as the separator <code>:</code> that has ever used by the <code>data attribute</code>s</p></li><li><p><code>pattern</code> a regular expression, for grouping, if a simple <code>separator</code> parameter can&#39;t simply separate the groups, you can set a <code>pattern</code> to separate the groups</p></li><li><p><code>rule</code> a regular expression, if you can&#39;t simply use the start and end tags to match the entire data attribute value, you can set the <code>rule</code> to match the whole.</p></li></ul></li><li><p><code>parse: () =&gt; void</code> After the parsed string data is obtained through the above configuration, the <code>parse</code> method is further parsed into usable data, because in the <code>parse</code> method, it will need to be used The general method of the inherited parent class <code>Parser</code>, so the <code>parse</code> method should not use arrow functions to ensure the correct point of <code>this</code>.</p></li><li><p><code>setting</code> a configuration object. Currently, just a boolean field <code>frozen</code> is provided. if the <code>frozen</code> is true, then the <code>data attribute</code> can&#39;t be set repeatedly, otherwise the <code>data attribute</code> can be set twice more, such as the configuration attribute, <code>#[a=1]:#[b=1]</code>, the final data will be merged the same to <code>#[a=1,b=1]</code>.</p></li></ul></li></ul><p>Now add a <code>parser</code> according to the above method, the code is as follows:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Define a parser to parse the form `(1,2,&quot;hello,world&quot;,3,&#39;good job!&#39;)`</span>\n<span class="token comment">// This format starts with a left parenthesis `(` and ends with a right parenthesis `)`</span>\n<span class="token comment">// Separate by comma `,`</span>\n<span class="token comment">// Because there may be English commas `,` in the string, you need to set the pattern to do complex matching</span>\nSuch<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token string">&quot;numberAndString&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  config<span class="token operator">:</span> <span class="token punctuation">{</span>\n    startTag<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    endTag<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;)&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    separator<span class="token operator">:</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span>\n    pattern<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*(?:([&#39;&quot;])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\d+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> patterns <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    patterns<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">match</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> quote<span class="token punctuation">]</span> <span class="token operator">=</span> match<span class="token punctuation">;</span>\n      value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>quote<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// is a string</span>\n        data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// is a number</span>\n        data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> data<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  setting<span class="token operator">:</span> <span class="token punctuation">{</span>\n    frozen<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// After defining `parser`, let&#39;s define a custom type and parse the data of the `parser`.</span>\nSuch<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&quot;showdata&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Define further processing of the numberAndString parsed by the parser</span>\n    <span class="token comment">// The first parameter name corresponding to addRule is consistent with the defined parser name</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addRule</span><span class="token punctuation">(</span><span class="token string">&quot;numberAndString&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">numAndStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>numAndStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> strings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      numAndStr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          strings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          numbers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        numbers<span class="token punctuation">,</span>\n        strings<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">generate</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> such</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// The final data will be parsed into params, the key is the name of the parser</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> numberAndString <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>params<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> numbers<span class="token punctuation">,</span> strings <span class="token punctuation">}</span> <span class="token operator">=</span> numberAndString<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> totalNum <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>totalNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> index <span class="token operator">=</span> such<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">makeRandom</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> totalNum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">number:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>numbers<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> totalStr <span class="token operator">=</span> strings<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>totalStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> index <span class="token operator">=</span> such<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">makeRandom</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> totalStr <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">string:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>strings<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> ret<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;|&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Now you can use custom types to simulate data</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;:showdata:(1, 2, &quot;hello&quot;, 3, 4, &quot;world&quot;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Will output `number:1|string:world`, `number:4|string:hello` etc.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br></div></div>',8),h={id:"such-alias",tabindex:"-1"},g=(0,t.Wm)("a",{class:"header-anchor",href:"#such-alias","aria-hidden":"true"},"#",-1),f=(0,t.Uk)(),y=(0,t.Wm)("code",null,"Such.alias",-1),w=(0,t.Uk)(),v=(0,t.uE)('<p>Define type alias, it&#39;s just need provide two arguments, one is the abbreviated alias name, the other is the actual existing long type name.</p><p><code>Such.alias(alias: string, fromType: string)</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Add an alias int for the integer type</span>\nSuch<span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">&quot;int&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;integer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',3),q={id:"such-config",tabindex:"-1"},S=(0,t.Wm)("a",{class:"header-anchor",href:"#such-config","aria-hidden":"true"},"#",-1),x=(0,t.Uk)(),j=(0,t.Wm)("code",null,"Such.config",-1),T=(0,t.Uk)(),W=(0,t.uE)('<p>With the above three methods, we can easily extend the types supported by Suchjs. In order to quickly define these data all, Suchjs provides this method:</p><p><code>Such.config(settings: TSuchSettings)</code></p><p>What the <code>settings</code> look like is shown in the below code.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// Here the corresponding call will be made using the `Such.parser` method</span>\n  parsers<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// key is the name of the corresponding parser, and the value is the second parsing configuration parameter</span>\n    numberAndString<span class="token operator">:</span> <span class="token punctuation">{</span>\n      config<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...The code can refer to the chapter defining the parser above</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// Correspondingly, the `Such.define` method will be used to call</span>\n  <span class="token comment">// where key is the name of the defined type</span>\n  <span class="token comment">// For the array value value, the parameter will be expanded in the apply way</span>\n  types<span class="token operator">:</span> <span class="token punctuation">{</span>\n    integer<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">boolean</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> such</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> such<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">isOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// This will call `Such.alias` to create an alias</span>\n  <span class="token comment">// key is the alias name, value is the original type name</span>\n  alias<span class="token operator">:</span> <span class="token punctuation">{</span>\n    int<span class="token operator">:</span> <span class="token string">&quot;integer&quot;</span><span class="token punctuation">,</span>\n    bool<span class="token operator">:</span> <span class="token string">&quot;boolean&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// The following configuration is only used in the Node environment</span>\n  <span class="token comment">// &#39;extends&#39; it&#39;s an array list of config file should loaded first.</span>\n  <span class="token comment">// The config file use the same format as the current config parameter</span>\n  <span class="token comment">// It can be a json file or a CMD module</span>\n  <span class="token comment">// The ones beginning with &#39;such:&#39; are built-in config modules</span>\n  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;such:recommend&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// The file paths &amp; preload configuration</span>\n  config<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Whether to preload all data files, this is mainly for &#39;:dict&#39; data type and &#39;:cascade&#39; data type</span>\n    <span class="token comment">// Can be boolean, true means preload all files</span>\n    <span class="token comment">// It can also be an array, specifying the data file need to be preloaded</span>\n    preload<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token comment">// In the node environment, Such.as(&#39;*.json&#39;) will get the json file directly from this directory</span>\n    <span class="token comment">// Generate simulation data with the json file as the data configuration</span>\n    suchDir<span class="token operator">:</span> <span class="token string">&quot;suchas&quot;</span><span class="token punctuation">,</span>\n    <span class="token comment">// The path to store the data file</span>\n    dataDir<span class="token operator">:</span> <span class="token string">&quot;suchas/data&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div>',4),I={id:"such-assign",tabindex:"-1"},A=(0,t.Wm)("a",{class:"header-anchor",href:"#such-assign","aria-hidden":"true"},"#",-1),U=(0,t.Uk)(),D=(0,t.Wm)("code",null,"Such.assign",-1),O=(0,t.Uk)(),$=(0,t.uE)('<p>As mentioned earlier, all of our data mocking support function calls <code>data attribute</code> starting with <code>@</code> and data configuration <code>data attribute</code> like <code>#[key=value]</code>, so if you want to inject your own function call names and data configuration&#39;s value data variable, you need to use <code>Such.assign</code>.</p><p><code>Such.assign(key: string, value: unkown)</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Define a string truncation method</span>\nSuch<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">&quot;truncate&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> len</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> str<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// use it</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:string:{20}:@truncate(10)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Output is similar to：&#39;tALIHe(|ff...&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',3),E={id:"such-instance",tabindex:"-1"},N=(0,t.Wm)("a",{class:"header-anchor",href:"#such-instance","aria-hidden":"true"},"#",-1),P=(0,t.Uk)(),R=(0,t.Wm)("code",null,"Such.instance",-1),z=(0,t.Uk)(),C=(0,t.uE)('<p>It&#39;s a static method to directly generate a <code>Such</code> object instance instead of <code>new Such</code>, it is recommended. If your data needs to be generated multiple times, you need use it to create an instance; the static method <code>Such.as(target, options?)</code> is a syntactic sugar method just like this: <code>Such.instance(target, options?).a()</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> IDGenerator <span class="token operator">=</span> Such<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token string">&quot;:increment&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Generate a simulation data</span>\nIDGenerator<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\nIDGenerator<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Since the version <code>v1.2.0</code>, the optional parameter of <code>instanceOptions</code> is supported when calling the <code>a(instanceOptions?: IAInstanceOptions)</code> method. This parameter currently supports the configuration of the <code>keys</code> field, it&#39;s an object use the path of the data as the <code>key</code>, use an object <code>{min?: number, max?: number}</code> as the <code>value</code>.It&#39;s used to set different configurations for each simulation data. At present, it mainly focuses on optional fields and array fields.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// the declaration of the type IAInstanceOptions</span>\n<span class="token keyword">type</span> <span class="token class-name">IAInstanceOptions</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  keys<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      min<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n      max<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n      exist<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n      index<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// The `key` is a path of the data, specify the number of occurrences of the field which the path pointed to.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Example of configuring optional fields</span>\n<span class="token keyword">const</span> genOptional <span class="token operator">=</span> Such<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&quot;optional?&quot;</span><span class="token operator">:</span> <span class="token string">&quot;:boolean&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Without parameters, the `optional` field above may or may not exist</span>\ngenOptional<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Add `instanceOptions` parameter</span>\n<span class="token comment">// The `optional` field of the following calls will never exist</span>\ngenOptional<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  keys<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;/optional&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// `max` is 0, which means that the number of occurrences of the `optional` field can only be 0</span>\n      <span class="token comment">// This is equivalent to &quot;exist: false&quot;</span>\n      <span class="token comment">// If the field is both optional and has an array length, you should just use &quot;exist&quot;</span>\n      max<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// The `optional` field of the following calls will always exist</span>\ngenOptional<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  keys<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;/optional&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// `min` is 1, indicating that the number of occurrences of the optional field can only be 1</span>\n      <span class="token comment">// This is equivalent to &quot;exist: true&quot;</span>\n      <span class="token comment">// If the field is both optional and has an array length, you should just use &quot;exist&quot;</span>\n      min<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Example of configuration array field</span>\n<span class="token keyword">const</span> genArray <span class="token operator">=</span> Such<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&quot;array{5,10}&quot;</span><span class="token operator">:</span> <span class="token string">&quot;:number&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Without parameters, so the length of the array is 5 to 10</span>\ngenArray<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Add `instanceOptions` parameter</span>\n<span class="token comment">// The following parameters will limit the length of the array to 6 to 8</span>\n<span class="token comment">// Note that the range of this parameter can only be narrowed within the original range, not widened</span>\ngenOptional<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  keys<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;/array&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      min<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>\n      max<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// The following call will determine the length of the array to 6</span>\ngenOptional<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  keys<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;/array&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      min<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>\n      max<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// For enumeration types, you can also specify the index value of the enumeration</span>\n<span class="token keyword">const</span> genResult <span class="token operator">=</span> Such<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&quot;errno{1}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ngenResult<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  keys<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;/errno&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      index<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div>',6),_={id:"such-as",tabindex:"-1"},F=(0,t.Wm)("a",{class:"header-anchor",href:"#such-as","aria-hidden":"true"},"#",-1),M=(0,t.Uk)(),G=(0,t.Wm)("code",null,"Such.as",-1),H=(0,t.Uk)(),B=(0,t.Wm)("p",null,[(0,t.Uk)("As mentioned in the above "),(0,t.Wm)("code",null,"Such.instance"),(0,t.Uk)(" static method, this method provides a quick method entry that only requires generate a simulation data once.")],-1),L={id:"such-template",tabindex:"-1"},Y=(0,t.Wm)("a",{class:"header-anchor",href:"#such-template","aria-hidden":"true"},"#",-1),J=(0,t.Uk)(),K=(0,t.Wm)("code",null,"Such.template",-1),Q=(0,t.Uk)(),V=(0,t.Uk)("This method is also the method actually called by the "),X=(0,t.Uk)("template literal type"),Z=(0,t.uE)(". The difference is that it does not require the leading three colons <code>:::</code> as the type identifier. It accepts a string template, if it is a data type variable, it can be wrapped with the (backtick =&gt; &quot;`&quot;) symbol. If there are other data attribute parameters, the three colons <code>:::</code> are still used to indicate that the template literal is end, and the following string will be parsed as the type of <code>data attribute</code>s. The <code>data attribute</code>s supported by the current version only includes length <code>data attribute</code> like <code>{3}</code>, indicating how many times the previous template string is repeated. If you need to output the normal backtick ` symbol, or the three colons <code>:::</code>, please add a backslash <code>\\\\</code> in front of it to escape.",17),nn=(0,t.uE)('<p><code>Such.template(key: string, path?: TFieldPath)</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// When only call itself, no need to provide the path parameter like a xpath of data</span>\n<span class="token comment">// The path parameter is mainly provided when using the template string type to facilitate better prompts for errors</span>\nSuch<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">&quot;dict&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;bear&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rabbit&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// return a Template object</span>\n<span class="token keyword">const</span> tmpl <span class="token operator">=</span> Such<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span>\n  <span class="token string">&quot;i spent `:number:[50,100]` dollars to buy a `:dict:#[data=dict]` toy.&quot;</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// like the `Such` instance, it has a `a()` method to generate a value base on the template instance</span>\ntmpl<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> ucaseTmpl <span class="token operator">=</span> Such<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token string">&quot;`:uppercase:{3}`:::{3}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nucaseTmpl<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output similar to: &quot;ACDACDACD&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>The above is basically the main APIs provided by <code>Suchjs</code>, and other APIs may be added and changed as the library&#39;s version changes. If you have any good comments, please feel free to provide feedback <code>in github</code>.</p><p>There are also some APIs based on data caching, loading and updating in the Nodejs environment, which will be explained in a separate chapter.</p>',4),sn={render:function(n,s){const a=(0,t.up)("Badge"),sn=(0,t.up)("RouterLink");return(0,t.wg)(),(0,t.j4)(t.HY,null,[(0,t.Wm)("h3",p,[e,o,c,l,(0,t.Wm)(a,{text:">= 1.0.0"})]),u,(0,t.Wm)("h3",i,[r,k,d,m,(0,t.Wm)(a,{text:">= 1.0.0"})]),b,(0,t.Wm)("h3",h,[g,f,y,w,(0,t.Wm)(a,{text:">= 1.0.0"})]),v,(0,t.Wm)("h3",q,[S,x,j,T,(0,t.Wm)(a,{text:">= 1.0.0"})]),W,(0,t.Wm)("h3",I,[A,U,D,O,(0,t.Wm)(a,{text:">= 1.0.0"})]),$,(0,t.Wm)("h3",E,[N,P,R,z,(0,t.Wm)(a,{text:">= 1.0.0"})]),C,(0,t.Wm)("h3",_,[F,M,G,H,(0,t.Wm)(a,{text:">= 1.0.0"})]),B,(0,t.Wm)("h3",L,[Y,J,K,Q,(0,t.Wm)(a,{text:">= 1.1.0"})]),(0,t.Wm)("p",null,[V,(0,t.Wm)(sn,{to:"/en/types/template.html"},{default:(0,t.w5)((()=>[X])),_:1}),Z]),nn],64)}}}}]);