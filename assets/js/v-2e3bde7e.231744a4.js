"use strict";(self.webpackChunksuchjs_com=self.webpackChunksuchjs_com||[]).push([[332],{3725:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-2e3bde7e",path:"/types/number.html",title:":number",lang:"zh-CN",frontmatter:{lang:"zh-CN",title:":number",description:"suchjs内置类型number"},excerpt:"",headers:[],filePathRelative:"types/number.md",git:{contributors:[]}}},6006:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(6252);const c={id:"number-类型说明",tabindex:"-1"},t=(0,e.Wm)("a",{class:"header-anchor",href:"#number-类型说明","aria-hidden":"true"},"#",-1),p=(0,e.Uk)(" number 类型说明 "),u=(0,e.uE)('<p><code>:number</code> 类型是 <code>suchjs</code> 内置的另一最基本类型之一，它支持以下数据属性：</p><ul><li><code>[min,max]</code> 大小范围，用来设置数字的最小值与最大值。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 设置大小范围为1到100的数字</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:number:[1,100]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 数字理论上默认是包含最大值与最小值的</span>\n<span class="token comment">// 因为随机值浮点数的关系，出现最大值与最小值的概率非常小</span>\n<span class="token comment">// 如果的确不想包含最大值或者最小值，可以加上配置属性exclude</span>\n<span class="token comment">// 配置为&#39;min&#39;为不包含最小值，配置为&#39;max&#39;为不包含最大值</span>\n<span class="token comment">// 配置为&#39;min,max&#39;或者&#39;both&#39;为最小值与最大值都不包含</span>\nSuch<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:number:[1,100]:#[exclude=&#39;max&#39;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li><code>%</code> 格式化，数字类型没有格式化时，小数部分形如<code>Math.random()</code>，但通常这不是我们想要的数据，一般情况下我们都会对其进行格式化，suchjs使用单独提取的库 <code>nprintf</code> 来对数字进行类似c语言的格式化。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Such<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;:number:[1,100]:%.2f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 输出类似 `32.58`</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',5),o={render:function(n,s){const a=(0,e.up)("Badge");return(0,e.wg)(),(0,e.j4)(e.HY,null,[(0,e.Wm)("h4",c,[t,p,(0,e.Wm)(a,{text:">= 1.0.0"})]),u],64)}}}}]);